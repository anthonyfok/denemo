;;;Swap Passages
(let ()
    (define (swap-passage)
        (define start-tick (d-GetStartTick))
        (define end-tick #f)
        (define end-measure #f)
        (define startpos (GetPosition))
        (d-MoveCursorRight)
        (d-SetMark)
        (while (and (not (end-passage?)) (d-CursorRight)))
        (if (end-passage?)
            (d-CursorLeft))
        (set! end-measure (d-GetMeasure))
        (set! end-tick (d-GetEndTick))
        (d-Cut)
        (d-PushClipboard)
        (apply d-GoToPosition startpos)
        
        (if (d-MoveToStaffDown)
            (let ((position #f))
                (while (and  (not (eq? start-tick (d-GetStartTick))) (d-MoveCursorRight)))
                (d-UnsetMark)
                (if (eq? start-tick (d-GetStartTick))
                	(let ()
                        (define (at-end?)
                            (and (eq? end-measure (d-GetMeasure)) (eq? end-tick (d-GetEndTick))))
               			(set! position (GetPosition)) 
               			(d-SetMark)
                		(while (and (not (at-end?)) (d-CursorRight)))
                		(if (at-end?)
                   			(begin
                                (d-Cut)
                                (d-PushClipboard)
                                (apply d-GoToPosition position)
                                (d-PopClipboard 1)
                                (d-Paste)
                                 (if (UnderfullMeasure?)
                                	(d-MergeWithNextMeasure))
                                (apply d-GoToPosition startpos)
                                (d-MoveCursorRight)
                                (d-PopClipboard)
                                (d-Paste)
                                (if (UnderfullMeasure?)
                                	(d-MergeWithNextMeasure)))))))
		(d-WarningDialog (_ "No staff below to swap passages with"))))

    (define (start-passage?)
        (d-Directive-standalone? "StartPassage"))
   (define (end-passage?)
        (d-Directive-standalone? "EndPassage"))
    ;;; procedure starts here
    (d-MoveToBeginning)
    (let loop ()
        (if (start-passage?)
            (swap-passage)
            (while (d-MoveCursorRight)
                (loop)))
        (if (d-MoveCursorRight)
            (loop))))
    
