<?xml version="1.0"?>
<Denemo>
  <merge>
    <title>A Denemo Keymap</title>
    <author>AT, JRR, RTS</author>
    <map>
      <row>
        <after/>
        <action>ReadingNoteNames</action>
        <scheme>;;;;;;;;;;;;;;;
;;ReadingNoteNames NEW VERSION
;; tests note name recognition.


(define ReadingNoteNames::score 0)
(define ReadingNoteNames::notewas #f)

(define (ReadingNoteNames::showscore)
  (d-DirectivePut-score-display "ReadingNoteNames::GameScore" (string-append "&lt;b&gt;Score: " (object-&gt;string ReadingNoteNames::score) "&lt;/b&gt;")))

(define ReadingNoteNames::shiftup
  (lambda (n)
    (if (&gt; n 0) (begin
		  (d-CursorUp)
		  (ReadingNoteNames::shiftup (- n 1))))))

(define ReadingNoteNames::shiftdown
  (lambda (n)
    (if (&gt; n 0) (begin
		  (d-CursorDown)
		  (ReadingNoteNames::shiftdown (- n 1))))))

(define (ReadingNoteNames::notechosen usernote)
		      (begin
			(display (string-append "the note chosen
" usernote "the note sought
" ReadingNoteNames::notewas))
			(if  (string=? ReadingNoteNames::notewas usernote)
			     (begin
			       (set! ReadingNoteNames::score (+ ReadingNoteNames::score 1))
			       ;;;(PlaceAnswerStatus "NoteCorrect" "CheckMark")
			       (d-ChangeNotehead "Diamond"))
			     (begin
			       (set! ReadingNoteNames::score (- ReadingNoteNames::score 1))
			       ;;;(PlaceAnswerStatus "NoteWrong" "CrossSign")
			       (d-ChangeNotehead "Cross"))) 
			(ReadingNoteNames::runtest)))


(define (ReadingNoteNames::print) 
  (d-PrintPreview)
  (d-SetSaved))
(define (ReadingNoteNames::quit) 
  (d-Close))

;;;;;;;; the main function to run the test
(define (ReadingNoteNames::runtest) 
    (if #t
	(let (    
	      (usernote #t)
	      (steps 0)
	      (span 8) ;; how many steps of the scale to test.
	      
	      )
	  (set! steps (+ 1 (random span)))
	  (ReadingNoteNames::shiftup steps)
	  (d-Insert2)
	  (set! ReadingNoteNames::notewas (d-GetNoteName))	  
	  (ReadingNoteNames::showscore)
	  (ReadingNoteNames::shiftdown steps)
	  )
	))

;; set the random seed up using time of day
(let ((time (gettimeofday)))
  (set! *random-state*
	(seed-&gt;random-state (+ (car time)
			       (cdr time)))))
(d-PlayMidiKey #xF03001)
(d-PlayMidiKey #xF02A01)
(d-PlayMidiKey #xF04001)

(d-New)

(CreateButton "ReadingNoteNames::GameScore" "&lt;span font_desc=\"16\"&gt;Click Go to start&lt;/span&gt;")
(CreateButton "ReadingNoteNames::GameHelp" "&lt;b&gt;Help&lt;/b&gt;")
(CreateButton "ReadingNoteNames::GameGo" "&lt;span font_desc=\"36\"&gt;Go&lt;/span&gt;")
(d-SetDirectiveTagActionScript "ReadingNoteNames::GameGo" "(ReadingNoteNames::runtest)")


(CreateButton "ReadingNoteNames::GamePrint" "&lt;span font_desc=\"36\"&gt;Print&lt;/span&gt;")
(d-SetDirectiveTagActionScript "ReadingNoteNames::GamePrint" "(ReadingNoteNames::print)")


(CreateButton "ReadingNoteNames::Close" "&lt;span font_desc=\"36\"&gt;Quit&lt;/span&gt;")
(d-SetDirectiveTagActionScript "ReadingNoteNames::Close" "(ReadingNoteNames::quit)")


(define (ReadingNoteNames::createbuttons note)
  (CreateButton (string-append "ReadingNoteNames::" note)  (string-append " &lt;span font_desc=\"36\" foreground=\"blue\"&gt;" note  "&lt;/span&gt;"))
  (d-SetDirectiveTagActionScript  (string-append "ReadingNoteNames::" note) (string-append "(ReadingNoteNames::notechosen \"" note "\")")))

(ReadingNoteNames::createbuttons "a")
(ReadingNoteNames::createbuttons "b")
(ReadingNoteNames::createbuttons "c")
(ReadingNoteNames::createbuttons "d")
(ReadingNoteNames::createbuttons "e")
(ReadingNoteNames::createbuttons "f")
(ReadingNoteNames::createbuttons "g")


(d-PlayMidiKey #xF03001)
(d-PlayMidiKey #xF02A01)
(d-PlayMidiKey #xF04001)
</scheme>
        <label>Note Name Recognition</label>
        <tooltip>%tests your ability to name the notes of the scale</tooltip>
      </row>
    </map>
  </merge>
</Denemo>
