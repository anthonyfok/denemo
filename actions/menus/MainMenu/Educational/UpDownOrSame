<?xml version="1.0"?>
<Denemo>
  <merge>
    <title>A Denemo Keymap</title>
    <author>AT, JRR, RTS</author>
    <map>
      <row>
        <action>UpDownOrSame</action>
        <scheme>;;;;;;;;;;;;;;;
;;UpDownOrSame

(define UpDownOrSame::score 0)
(define UpDownOrSame::interval 2)
(define UpDownOrSame::start (current-time))
(define UpDownOrSame::end (current-time))
(define UpDownOrSame::num-goes 30)
(define UpDownOrSame::directionwas #t)
(define UpDownOrSame::userinput #t)

;; set the random seed up using time of day
(let ((time (gettimeofday)))
  (set! *random-state*
	(seed-&gt;random-state (+ (car time)
			       (cdr time)))))

(define (UpDownOrSame::showscore)
  (d-DirectivePut-score-display "UpDownOrSame::GameScore" (string-append "&lt;b&gt;Score: " (object-&gt;string UpDownOrSame::score) "&lt;/b&gt; in " (object-&gt;string (- UpDownOrSame::end UpDownOrSame::start)) " Secs.")))

(define (UpDownOrSame::help) 
  (d-InfoDialog "Click on the Up arrow if the note goes up, 
  Down arrow if the note goes down, and Right arrow if the note stays the same")
)

(define (UpDownOrSame::GameOver)
  (let ( (BufferOne "") )
   (set! BufferOne (string-append "Game Over\n" "Your Score = " (number->string UpDownOrSame::score)))
  (d-InfoDialog BufferOne))
)

(define (UpDownOrSame::ScoreBoard)
  (let ( (BufferOne "") )
   (set! BufferOne (string-append "This is Where the scoreboard will be in the future."))
  (d-InfoDialog BufferOne))
)

(define UpDownOrSame::shiftup
  (lambda (n)
    (if (&gt; n 0) (begin
		  (d-CursorUp)
		  (UpDownOrSame::shiftup (- n 1))))))

(define UpDownOrSame::shiftdown
  (lambda (n)
    (if (&gt; n 0) (begin
		  (d-CursorDown)
		  (UpDownOrSame::shiftdown (- n 1))))))

(define (UpDownOrSame::PlaceAnswerStatus gfx)
  (begin
    (d-DirectivePut-note-minpixels "UpDownOrSame::tick" 30)
    (d-DirectivePut-note-gx "UpDownOrSame::tick" -15)
    (d-DirectivePut-note-gy "UpDownOrSame::tick" 40)
    (d-DirectivePut-note-graphic "UpDownOrSame::tick" gfx)))


(CreateButton "UpDownOrSame::GameScore" "&lt;span font_desc=\"12\"&gt;Score&lt;/span&gt;")
(d-SetDirectiveTagActionScript "UpDownOrSame::GameScore" "(UpDownOrSame::ScoreBoard)")
(CreateButton "UpDownOrSame::GameHelp" "&lt;b&gt;Help&lt;/b&gt;")
(d-SetDirectiveTagActionScript "UpDownOrSame::GameHelp" "(UpDownOrSame::help)")


;;;;;;;; the main function to run the test - just goes to end and places a note at a random height above the cursor, returning the cursor to where it was.
(define (UpDownOrSame::offerNote) 
(if (>= UpDownOrSame::num-goes 0)
	(let (    
	      (steps 0)
	      (direction 0)
	      )
	;;  (d-GoToEnd)
	  (let gotoEnd () (if  (d-NextObject) (gotoEnd)))
	  (set! steps (+ 1 (random UpDownOrSame::interval)))
	  (set! direction (random 3))
	  (cond ((= direction 0)
	            (UpDownOrSame::shiftdown steps)
                    (d-Insert2) 
                    (set! UpDownOrSame::directionwas "Down"))
          	((= direction 1)
	            (UpDownOrSame::shiftup steps)
                    (d-Insert2)
	            (set! UpDownOrSame::directionwas "Up"))
	        ((= direction 2)
                    (d-Insert2)
	            (set! UpDownOrSame::directionwas "Same")))
	   (UpDownOrSame::showscore)
	   (set! UpDownOrSame::num-goes (-  UpDownOrSame::num-goes 1))
	  )
	))



;;;;;;;;; callback when user chooses a note
(define (UpDownOrSame::directionchosen usernote)
		      (begin
			(set! UpDownOrSame::end (current-time))
			(let gotoEnd () (if  (d-NextObject) (gotoEnd)))	
			(if  (string=? UpDownOrSame::directionwas usernote)
			     (begin
			       (set! UpDownOrSame::score (+ UpDownOrSame::score 1))
			       (UpDownOrSame::PlaceAnswerStatus "CheckMark")
			       (d-ChangeNotehead "Diamond"))
			     (begin
			       (set! UpDownOrSame::score (- UpDownOrSame::score 1))
			       (UpDownOrSame::PlaceAnswerStatus "CrossSign")
			       (d-ChangeNotehead "Cross"))) 
			       (UpDownOrSame::offerNote)
			       ))


	
;;;;;;;; the main function to run the test
(define UpDownOrSame::runtest 
	(lambda (n)
	  (if (>= n 0) (begin
	    		(set! UpDownOrSame::userinput (d-GetKeypress))
			(if (string=? UpDownOrSame::userinput "Right")
			  (set! UpDownOrSame::userinput "Same"))
			(UpDownOrSame::directionchosen UpDownOrSame::userinput)	
			;(set! UpDownOrSame::num-goes (-  UpDownOrSame::num-goes 1))
			(UpDownOrSame::runtest UpDownOrSame::num-goes)))))


(d-PlayMidiKey #xF03001)
(d-PlayMidiKey #xF02A01)
(d-PlayMidiKey #xF04001)

(define (UpDownOrSame::createbuttons direction)
  (CreateButton (string-append "UpDownOrSame::" direction)  (string-append " &lt;span font_desc=\"32\" foreground=\"blue\"&gt;" direction  "&lt;/span&gt;"))
  (d-SetDirectiveTagActionScript  (string-append "UpDownOrSame::" direction) (string-append "(UpDownOrSame::directionchosen \"" direction "\")")))

(UpDownOrSame::createbuttons "Up")
(UpDownOrSame::createbuttons "Down")
(UpDownOrSame::createbuttons "Same")



(UpDownOrSame::shiftup 6)
(d-Insert2)
(UpDownOrSame::offerNote)
(set! UpDownOrSame::start (current-time))
(UpDownOrSame::runtest UpDownOrSame::num-goes)
(UpDownOrSame::GameOver)

(d-PlayMidiKey #xF03001)
(d-PlayMidiKey #xF02A01)
(d-PlayMidiKey #xF04001)
  
;;;;;;;;;;;;;;;;;;;;;;;;;;

</scheme>
        <label>Trace Note Direction</label>
        <tooltip>%tests your note tracking ability</tooltip>
      </row>
    </map>
  </merge>
</Denemo>
