<?xml version="1.0"?>
<Denemo>
  <merge>
    <title>A Denemo Keymap</title>
    <author>AT, JRR, RTS</author>
    <map>
      <row>
        <action>CountSteps</action>
        <scheme>;;;;;;;;;;;;;;;
;;CountSteps
;; tests interval recognition.
(define CountSteps::score 0)
(define CountSteps::interval 3)
(define CountSteps::start (current-time))
(define CountSteps::end (current-time))
(define CountSteps::num-goes 30)
(define CountSteps::intervalwas #t)
(define CountSteps::userinput #t)
(define CountSteps::direction 0)

(define (CountSteps::showscore)
  (d-DirectivePut-score-display "CountSteps::GameScore" (string-append "&lt;b&gt;Score: " (object-&gt;string CountSteps::score) "&lt;/b&gt; in " (object-&gt;string (- CountSteps::end CountSteps::start)) " Secs.")))

(define (CountSteps::help) 
  (d-InfoDialog "Count how many steps it takes to get to the next note. Enter this number on they keyboard..... ")
)

(define (CountSteps::GameOver)
  (let ( (BufferOne "") )
   (set! BufferOne (string-append "Game Over\n" "Your Score = " (number->string CountSteps::score)))
  (d-InfoDialog BufferOne))
)

(define (CountSteps::ScoreBoard)
  (let ( (BufferOne "") )
   (set! BufferOne (string-append "This is Where the scoreboard will be in the future."))
  (d-InfoDialog BufferOne))
)

(CreateButton "CountSteps::GameScore" "&lt;span font_desc=\"12\"&gt;Score&lt;/span&gt;")
(d-SetDirectiveTagActionScript "CountSteps::GameScore" "(CountSteps::ScoreBoard)")
(CreateButton "CountSteps::GameHelp" "&lt;b&gt;Help&lt;/b&gt;")
(d-SetDirectiveTagActionScript "CountSteps::GameHelp" "(CountSteps::help)")


;;;;;;;; the main function to run the test - just goes to end and places a note at a random height above the cursor, returning the cursor to where it was.
(define (CountSteps::offerNote) 
(if (>= CountSteps::num-goes 0)
	(let ( (steps 0) )
	  ;;  (d-GoToEnd)
	  (let gotoEnd () (if  (d-NextObject) (gotoEnd)))
	  (set! steps (random CountSteps::interval))
	  (if (= steps 0)
	    (set! steps (+ steps 1)))
	  (if (= CountSteps::direction 0)
	      (begin
	            (EducationGames::shiftup steps)
	            (set! CountSteps::direction 1))
	      (begin 
	            (EducationGames::shiftdown steps)
	            (set! CountSteps::direction 0)))
	    
          (d-Insert2) 
          (set! CountSteps::intervalwas (steps))

          (CountSteps::showscore)
	  (set! CountSteps::num-goes (-  CountSteps::num-goes 1))
	  )
	))

;;;;;;;;; callback when user chooses a note
(define (CountSteps::intervalchosen interval)
		      (begin
			(set! CountSteps::end (current-time))
			(let gotoEnd () (if  (d-NextObject) (gotoEnd)))	
			(if  (= CountSteps::intervalwas interval)
			     (begin
			       (set! CountSteps::score (+ CountSteps::score 1))
			       (EducationGames::PlaceAnswerStatus "CheckMark")
			       (d-ChangeNotehead "Diamond"))
			     (begin
			       (set! CountSteps::score (- CountSteps::score 1))
			       (EducationGames::PlaceAnswerStatus "CrossSign")
			       (d-ChangeNotehead "Cross"))) 
			       (CountSteps::offerNote)
			       ))
	
;;;;;;;; the main function to run the test
(define CountSteps::runtest 
	(lambda (n)
	  (if (>= n 0) (begin
	    		;(set! CountSteps::userinput (d-GetKeypress))
	                (set! CountSteps::userinput (d-GetChar))
			(set! CountSteps::userinput 
                            (string-&gt;number CountSteps::userinput))
  			(if (not (integer? CountSteps::userinput))
  			  (set! CountSteps::userinput 1))

			(CountSteps::intervalchosen CountSteps::userinput)	
			(CountSteps::runtest CountSteps::num-goes)))))

			
(define (CountSteps::plus)
  (set! CountSteps::interval (+ CountSteps::interval 1))
  (if (&gt; CountSteps::interval 32)
      (set! CountSteps::interval 32))
  (d-DirectivePut-score-display "CountSteps::GameInterval"
				(string-append "&lt;span font_desc=\"12\"&gt;Interval: " (object-&gt;string CountSteps::interval) "&lt;/span&gt;")))

(define (CountSteps::minus)
  (set! CountSteps::interval (- CountSteps::interval 1))
  (if (&lt; CountSteps::interval 2)
      (set! CountSteps::interval 2))
  (d-DirectivePut-score-display "CountSteps::GameInterval"
				(string-append "&lt;span font_desc=\"12\"&gt;Interval: " (object-&gt;string CountSteps::interval) "&lt;/span&gt;")))

(define (CountSteps::setInterval)
  (set! CountSteps::interval (string-&gt;number (d-GetUserInput "Interval" "Give number of steps you want to name note over" (object-&gt;string CountSteps::interval))))
  (if (boolean? CountSteps::interval)
       (set! CountSteps::interval 8))
  (if (&lt; CountSteps::interval 2)
       (set! CountSteps::interval 2))
  (if (&gt; CountSteps::interval 32)
      (set! CountSteps::interval 32))
  (d-DirectivePut-score-display "CountSteps::GameInterval"
				(string-append "&lt;span font_desc=\"12\"&gt;Interval: " (object-&gt;string CountSteps::interval) "&lt;/span&gt;")))


(CreateButton "CountSteps::GameMinus" "&lt;b&gt;-&lt;/b&gt;")
(d-SetDirectiveTagActionScript "CountSteps::GameMinus" "(CountSteps::minus)")
(CreateButton "CountSteps::GameInterval" (string-append "&lt;span font_desc=\"12\"&gt;Interval: " (object-&gt;string CountSteps::interval) "&lt;/span&gt;"))
(d-SetDirectiveTagActionScript "CountSteps::GameInterval" "(CountSteps::setInterval)")
(CreateButton "CountSteps::GamePlus" "&lt;b&gt;+&lt;/b&gt;")
(d-SetDirectiveTagActionScript "CountSteps::GamePlus" "(CountSteps::plus)")





	  

  (d-PlayMidiKey #xF03001)
  (d-PlayMidiKey #xF02A01)
  (d-PlayMidiKey #xF04001)

(EducationGames::shiftup 6)
(d-Insert2)
(CountSteps::offerNote)
(set! CountSteps::start (current-time))
(CountSteps::runtest CountSteps::num-goes)
(CountSteps::GameOver)


  (d-PlayMidiKey #xF03001)
  (d-PlayMidiKey #xF02A01)
  (d-PlayMidiKey #xF04001)
  )
;;;;;;;;;;;;;;;;;;;;;;;;;;

</scheme>
        <label>Step Counting Exercise</label>
        <tooltip>%tests your ability to find the number of diatonic notes between two notes</tooltip>
      </row>
    </map>
  </merge>
</Denemo>
