/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Library General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor Boston, MA 02110-1301,  USA
 */


#include "denemo_objects.h"
#define EXT_MIDI 0
#define EXT_CSOUND 1
typedef void (*GActionCallback) (GtkAction *action, gpointer data);
#define G_ACTIONCALLBACK(f) ((GActionCallback)(f)) 
 /* and the following typedefs are basically here for so that it's
 * possible to understand what my code is doing -- just as much for
 * my sake as yours!
 *
 * What can I say; I've done a lot of programming in Java and
 * SML/NJ; 
 * I like my type names to convey information. */

/* The ->data part of each objnode presently points to a DenemoObject */

typedef GList objnode;


typedef enum 
  {
    UNDO,
    REDO
  }unre_mode;

/* The idea here is to make everything recursive.  The dominant
   paradigm is a linked list.  Handy that there's such a nice
   precooked implementation of them in glib, eh?  Note, however, that
   the whole score isn't treated as a linked list of notes and other
   objects as it is in, say Rosegarden; instead, the program has a
   linked list of musical objects for each measure, and only then are
   measures linked into staffs.  That's my main beef with Rosegarden
   -- I don't tend to compose my stuff in the order in which it will
   eventually be played. As such, I like being able to start entering
   music in the middle of my score, then the beginning, then the end,
   or whatever, as appropriate.  */

typedef enum DenemoObjType
{
  CHORD,
  TUPOPEN,
  TUPCLOSE,
  CLEF,
  TIMESIG,
  KEYSIG,
  BARLINE,
  STEMDIRECTIVE,
  MEASUREBREAK,
  STAFFBREAK,
  DYNAMIC,
  GRACE_START,
  GRACE_END,
  LYRIC,
  FIGURE,
  FAKECHORD,
  PARTIAL
}DenemoObjType;

/**
 * Enumeration for Tuplets type
 * 
 */
typedef enum tuplet_type{
	DUPLET,
	TRIPLET,
	QUADTUPLET,
	QUINTUPLET,
	SEXTUPLET,
	SEPTUPLET	
}tuplet_type;

/**
 * Enumeration for Denemo's input mode
 */
typedef enum input_mode {
#define MODE_MASK (~(INPUTCLASSIC|INPUTEDIT|INPUTINSERT))
  INPUTCLASSIC = 1<<0, /* classic mode */
  INPUTEDIT = 1<<1, /* edit mode */
  INPUTINSERT = 1<<2, /* insert mode */
#define ENTRY_TYPE_MASK (~(INPUTNORMAL|INPUTREST|INPUTBLANK))
  INPUTNORMAL = 1<<3, /* entry type notes */
  INPUTREST = 1<<4, /* entry type rests */
  INPUTBLANK = 1<<5,/* entry type non-printing rests */
  TRAVERSE = 1<<6 /* read-only */
}input_mode;

/**
 * Denemo Action type currently used for undo/redo 
 * 
 */
typedef enum  action_type {
  ACTION_INSERT,
  ACTION_DELETE,
  ACTION_CHANGE
}action_type;

/**
 * Contains all the top-level information of an musical object
 * the object pointer contains the actual object
 */
typedef struct 
{
  DenemoObjType type; /**< The type of object contained in the GList */
  gchar *user_string;/**< Holds user's original text parsed to generated this 
			object */
  gint basic_durinticks;
  gint durinticks; /**< Duration of object */
  gint starttick; /**< When the object occurs */ 
  gint starttickofnextnote; /**< When the next object occurs */
  /**< Allots extra space for accidentals or reverse-aligned notes if
   * the stem is down */
  gint space_before; /**< Used to specify how much space is needed before the object */
  gint minpixelsalloted; 
  gint x; /**< Holds x co-ordinate relative to the beginning of the measure. used in mousing.c */
  gboolean isstart_beamgroup; /**< TRUE if object is the start of a beam group */
  gboolean isend_beamgroup; /**< TRUE if this is the end of a beam group */
  /* Mudelaobjunion u; has become a pointer*/
  gpointer object; /**< the structures pointed to are given in denemo_objects.h */
  gboolean isinvisible; /**< If  TRUE it will be rendered white and will not be seen. If it is set FALSE then it will be drawn normally. */
}DenemoObject;


/**
 * Enumeration for a staffs context. 
 * Currently only four to chose from,  may change if Lilypond 
 * adds any more
 */
typedef enum 
{
  DENEMO_NONE=1,
  DENEMO_PIANO,
  DENEMO_GROUP,
  DENEMO_CHOIR
}DenemoContext;


/**
 * The ->data part of each measurenode points to an objlist, which is
 * a list of the musical objects in that measure. 
 */
typedef GList measurenode;


/**
 * DenemoStaff contains all the information relating to a musical staff
 * 
 */
typedef struct 
{
  measurenode *measures; /**< This is a pointer to each measure in the staff */
  gint sclef; /**< Set initial clef see denemo_objects.h clefs */
  gint skey; /**< Set the inital keysig. >0=sharps <0 = flats */  
  gint skey_isminor;  /**< Values 0 = major, 1 = minor, 2 = mode */
  gint skeyaccs[7]; /**< Value used for current keysignature -7=Cb... -1=F, 0=C, 1=G...7=C# in a chain of fifths */
  gint stime1; /**< This is the initial timesig numerator */
  gint stime2; /**< This is the initial timesig denominator */
  gint leftmost_clefcontext; /**< The first clef used in a staff */
  gint leftmost_keysigcontext; /**< The first or initial keysig used in a staff. */
  gint leftmost_keywidth; /**< Space allowed for initial keysig  */
  gint leftmost_time1context; /**< This is the initial timesig numerator */
  gint leftmost_time2context; /**< This is the initial timesig denominator */

  gint leftmost_keyaccs[7]; /**< Rirst keysignature used in the staff */
  gint leftmost_stem_directive; /**< Rirst stem directive used in the staff */
  DenemoContext context;   /**< New variable to define the context in which this staff appears */
  /*
   * Staff Parameters
   * Added Adam Tee 27/1/2000, 2001 
   */
  gint no_of_lines; /**< Number of lines on the staff */
  gint transposition; /**< Determines if the notes are to be played back at pitch or not */
  gint pos_in_half_lines; /**< I believe this maybe broken. It does not seem to do much*/ 
  gint volume;	/**< Volume used for midi/csound playback */
  /* Back to Hiller stuff */
  GString *staff_name;
  /* RTS: I've introduced the staff name here, the other two are versions
     of the voice name; however I'm still sticking to the unwritten convention
     that each staff's voices are contiguous in si->thescore. Without this you
     can't have same named voices in different staffs. */
  GString *denemo_name; /**< denemo_name gets copied into lily_name */
  GString *lily_name; /**< this is the name of the staff that is export to lilypond */
  GString *midi_instrument; /**< midi instrument name used for the staff when exported via midi */

  gint space_above; /**< space above the staff used in the denemo gui */
  gint space_below; /**< space below the staff used in the denemo gui */
  gint voicenumber; /**< presently set to 2 for any non-primary voices; we might want to
   * change that, though */
  measurenode ** is_parasite; /**< points to address of host staff's measures 
				 field if measures are owned by another 
				 staff */

  gint nummeasures; /**< Number of measures in the staff*/
  GList *tone_store; /**< list of pitches and durations used a source for
			the notes in this staff
			the data are tone* */

}DenemoStaff;

/* The ->data part of each staffnode points to a staff structure */

typedef GList staffnode;/**< The ->data part of each staffnode points to a staff structure */
typedef staffnode *score;

/* a pair of staffs, used to relate two staffs together */
typedef struct staff_info
{
  DenemoStaff *main_staff; /**< eg the bass line or the vocal part */
  DenemoStaff *related_staff; /**< eg the figures for the bass or the lyrics*/
}
staff_info;


/**
 * Union for the two types of keypress related functions
 */
union func_union
{
  GtkFunction nocallback;  /**< Not associated with a menued item */
  GActionCallback callback; /**< Associated with a menued item */
};

/**
 * This structure is what's stored in the keymap data structure, both
 * in the array and in the hash tables.  Note that some redundant
 * information is stored in either case, but either one structure or
 * the other will need or find it useful to have each piece of information. 
 */
typedef struct KeybindingInfo
{
  gint keyval;
  gint state;
  gint command_number;
  gint callback_action;
  union func_union func;
}KeybindingInfo;

typedef struct DenemoKeymap
{
  GList **commands;
  GHashTable *quick_lookup_hashes;
}keymap;

typedef enum 
{
  RSM_OFF = 0,
  RSM_OVERLAY = 1<<0,
  RSM_RHYTHM = 1<<1
  
} RhythmicSubmode;

#define MAX_HISTORY 10
/**
 * DenemoPrefs holds information on user preferences. 
 */
typedef struct DenemoPrefs
{
  GString *lilypath; /**< This is the executable or full path to the lilypond executable */
  GString *midiplayer; /**< This is the external midifile player */ 
  GString *audioplayer; /**< This is used for playing audio files created from csound or other */
  gboolean playbackoutput; /**< This is a switch to turn on playing the csound output 
			     wav file after rendering or not */
  gboolean immediateplayback; /**< This options sends audio directly to synth as notes 
				are being entered */
  gboolean lilyentrystyle;  
  gboolean createclones; 
  gboolean articulation_palette; /**< This switch makes the articulation pallete visable */
  gboolean notation_palette; /**< This switch makes the notation pallete visable */
  gboolean rhythm_palette; /**< This option makes the rhythm pallete visable */
  gboolean saveparts; /**< Automatically save parts*/
  gboolean autosave; /**< Auto save data */
  gint autosave_timeout; 
  GString *browser; /**< Default browser string */
  GString *csoundcommand; /**< command used to execute csound */
  GString *csoundorcfile; /**< Path to .orc file used for csound playback */
  gboolean rtcs; /**< Real time csound */
  GString *pdfviewer; /**< PDF viewer */
  GString *texteditor; /**< texteditor for editing scripts and lilypond files */
  GString *denemopath; /**< path were denemo files are saved */
  GQueue *history; /**< Queue to contain recently opened files */
  keymap *the_keymap; /**< pointer to keymap data */
  keymap *standard_keymap; /* keymap to switch back to after using a special keymap */
  GString *lilyversion; /**< Lilypoind Version */
}DenemoPrefs;

/**
 * Contains all the lilypond header information
 *
 */
typedef struct LilypondHeaderInfo
{
/* Mudela file header information */
  GString *title;
  GString *subtitle;
  GString *poet;
  GString *composer;
  GString *meter;
  GString *opus;
  GString *arranger;
  GString *instrument;
  GString *dedication;
  GString *piece;
  GString *head;
  GString *copyright;
  GString *footer;
  GString *tagline;
/*  GString *; */

}LilypondHeaderInfo;

typedef enum 
{
  WOODWIND,
  BRASS,
  STRINGS,
  VOCALS,
  PITCHEDPERCUSSION,
  PLUCKEDSTRINGS,
  KEYBOARDS,
  NONE
}InstrumentType;

/**
 * Structure to contain the list of Instruments for the score
 * configuration wizard
 *
 */
typedef struct 
{
	GString *name;
	GString *midiinstrument;
	gint sclef;
	gint transposition;
	gint numstaffs;

}InstrumentConfig;

/**
 * Stores global instrument type and a list of InstrumentConfig structures
 */
typedef struct 
{
	InstrumentType type;
	GList *instruments;  // List to contain a list of Instruments of given type
}InstrumentList;

/**
 * Contains data required for undo/redo operation 
 * Borrowed idea from GScore
 */
typedef struct unre_data
{
  gpointer object;    /* pointer to object to be undone/redone */
  gint staffnum;      /* staff number */     
  gint measurenum;    /* measure number */
  gint position;      /* position in bar */
  enum action_type action; /*action type */

}unre_data;
 

/**
 * Structure to hold bookmark information
 * Id - gint
 * Bar - gint
 * Staff - gint
 */
typedef struct Bookmark
{
  gint id;
  gint bar;
  gint staff;
}Bookmark;

/** 
 * Contains paper score configuration
 *
 */
typedef struct DenemoScoreConfig
{
  GString *papersize;
  gint fontsize;
  GString	*lilyversion;
  gboolean orientation;
	
}DenemoScoreConfig;


/*
 *It contains
 * within it a DenemoPrefs *, and when Denemo supports editing
 * multiple scores simultaneously, each score's scoreinfo structure will
 * contain a pointer to the same single DenemoPrefs structure.
 *
 * I originally hit on this idea as a hack -- everything in Denemo was
 * coded to pass around struct scoreinfo *s, and I didn't want to
 * change this around -- but then I realized that it was a reasonably
 * good idea.  Basically all operations need access to the scoreinfo
 * structure, and a handful need access to the DenemoPrefs structure as
 * well. Only the preferences dialog needs access to _just_ the
 * DenemoPrefs structure.  So, why not keep things simple and always pass
 * around scoreinfos? */
 
/**
 * DenemoScore contains the information relating to a musical score
 */
typedef struct DenemoScore
{
  gboolean readonly; /**< Indicates if the file is readonly or not */
  GList *curlilynode; /**< the node of the lily parse tree on display 
			 in textwindow */
  GList *lily_file; /**< root of lily file parse, see lilyparser.y etc  */
  DenemoScoreConfig *config; /**< contains the paper configuration of the score*/
 
  gint leftmeasurenum; /**< start at 1 */
  gint rightmeasurenum;/**< start at 1 */
  gint top_staff;
  gint bottom_staff;
  gint measurewidth; /**< List of all minimum measure widths */
  GList *measurewidths;
  gint widthtoworkwith;
  gint staffspace;

  /* Fields that have more to do with the data model and its manipulation,
   * though they may be modified by side-effects of the drawing routines */
  score thescore;
  
  staffnode *currentprimarystaff;
  staffnode *currentstaff;
  gint currentstaffnum;
  measurenode *currentmeasure;
  gint currentmeasurenum;/**< start at 1 */
  objnode *currentobject; /**< currentobject points to the note preceding the cursor when the
   * cursor is appending. == NULL only when currentmeasure is empty. */
  gint cursor_x;
  gint cursor_y;
  gint staffletter_y;
  gint maxkeywidth;
  gboolean cursor_appending;
  
  gboolean cursoroffend;
  gint cursorclef;
  gint cursoraccs[7];
  gint cursortime1;
  gint cursortime2;
  gint curmeasureclef;
  gint curmeasurekey;
  gint curmeasureaccs[7];
  gint nextmeasureaccs[7];
  /* These are used for determining what accidentals should be there
   * if the cursor advances to the next measure from the next "insert chord"
   * operation */
  gint curmeasure_stem_directive;
 
  /* support for INPUTNORMAL sub mode RHYTMIC */
  RhythmicSubmode rhythmicsubmode;
  GList *rhythms;/**< list of RhythmPattern s */
  GList *currhythm; /**< currently in use element of rhythms */
  GList *rstep; /**< step within RhythmPattern->rsteps, the current element of the current rhythm pattern */

  gboolean is_grace_mode;
  /* Is there a figured bass present, is so this relates the bass
   * with its figures staff, if one is present */
  staff_info * has_figures;
  staff_info *has_fakechords;
  /* Now stuff that's used for marking areas */
  gint markstaffnum;
  gint markmeasurenum;
  gint markcursor_x;
  gint firststaffmarked;
  gint laststaffmarked;
  gint firstmeasuremarked;
  gint lastmeasuremarked;
  gint firstobjmarked;
  gint lastobjmarked;

  gboolean haschanged;
  gboolean is_slured; /** Temp field for testing for a slur*/

  /* Fields used for MIDI playback */
  gint tempo;
  gint start;
  gint end;
  gint stafftoplay;

  LilypondHeaderInfo *headerinfo;
  
  /* Filename */
  GString *filename;
  GString *autosavename;

 
  
  GList *savebuffer;
  /* Holds List of Plugin Names */
  

  /* a list of scoreinfos for each scoreblock in the (lilypond) file
     the last one is always the one currently at the address hardwired
     into the display functions.
     NULL if just one scoreblock in file */
  GList *scoreblocks;

  /*list of undo data */
  GQueue *undodata;
  GQueue *redodata;
  gint undo_redo_mode;

  
  DenemoScoreConfig *sconfig;
 
  GList *bookmarks;
  
  GList *Instruments;
  
}DenemoScore;

/**
 * DenemoGUI contains all the GUI information as 
 * well as a pointer to the DenemoScore structure.
 * 
 * It is done this way to allow abstraction from GUI specific 
 * and Score specific functions
 */
typedef struct DenemoGUI
{
		
  /* Fields used fairly directly for drawing */
  GtkWidget *window;
  GtkWidget *scorearea;
  GdkPixmap *pixmap;
  GtkObject *vadjustment;
  GtkWidget *vscrollbar;
  GtkObject *hadjustment;
  GtkWidget *hscrollbar;
  GtkWidget *menubar;
  GtkWidget *statusbar;
  gint status_context_id;
  GtkTextBuffer *textbuffer;   /**< text of lily input string corresponding to curobj */
  GtkWidget *textwindow; /**< top level window containing lily textwindow */
  GtkWidget *textview; /**< text entry containing lily text to be edited */
  GtkWidget *musicdatabutton; /**< button for editing music data textually */
  gulong sigid; /**< signal handler id for when text is changed */
  GtkWidget *musictext; /**< status bar with text of lily input string 
			   corresponding to music item at cursor */
  GtkUIManager *ui_manager;  /**< UI manager */
  GList *plugins;
  gint plugincounter;
  DenemoPrefs *prefs;  /**< And the DenemoPrefs pointer */
  GtkWidget* articulation_palette; /**< Articulation palette window */
  gboolean pitch_recognition;/**< Whether pitch recognition off/on */
  input_mode mode; /**< Input mode for Score */
  GtkWidget *progressbar;  	  
  DenemoScore *si;
}DenemoGUI;

/**
 * RhythmPattern: structure to pass giving information when in rhythmicsubmode;
 */

typedef struct RhythmPattern
{
  GList *rsteps; /**< the data are RhythmElements */
  GtkToolButton *button; /**< the button on the rhythm toolbar which invokes this rhythm */
  DenemoGUI *gui;
} RhythmPattern;


/**
 * RhythmElement: information about one element of a RhythmPatternwhen in rhythmicsubmode;
*/

typedef struct RhythmElement
{
  GList* functions; /**< data in list are functions to be called including modifiers 
		      eg insert_chord_3key, add dot, slur ...  */
  gpointer icon; /**< icon when this element is active FIXME at present just a string */
} RhythmElement;

struct cs_callback
{
	GtkWidget *entry;
	GtkWidget *dialog;
	DenemoGUI *gui;
	
};

static gchar* ext_pidfiles[] = {"midiplayer.pid", "csoundplayer.pid", NULL};
