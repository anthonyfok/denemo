#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\date{}
\pagenumbering{roman}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 5mm
\topmargin 5mm
\rightmargin 5mm
\bottommargin 5mm
\headheight 5mm
\headsep 5mm
\footskip 5mm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Denemo User Manual
\end_layout

\begin_layout Author
Richard Shann
\end_layout

\begin_layout Standard
\align center
\begin_inset CommandInset href
LatexCommand href
name "richard@rshann.plus.com"
target "richard@rshann.plus.com"
type "mailto:"

\end_inset


\end_layout

\begin_layout Standard
\align center
This Manual is released under the 
\begin_inset CommandInset href
LatexCommand href
name "Creative Commons Attribution-Share Alike 3.0 Unported"
target "http://creativecommons.org/licenses/by-sa/3.0"

\end_inset

 license.
\end_layout

\begin_layout Standard
\align center
Copyright Â© 2009, 2010, 2011, 2012, 2013, 2014, 2015 Denemo Project
\end_layout

\begin_layout Standard
\align center
Updates for version 1.3
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Part
Getting Started
\end_layout

\begin_layout Section*
Introduction 
\begin_inset Note Note
status open

\begin_layout Plain Layout
(Temporarily) delete this pagenumbering command out before HTML export.
\end_layout

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagenumbering{arabic} 
\backslash
setcounter{page}{1} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Denemo lets you create musical scores.
 You can type music in using the keyboard or play it in using a MIDI contoller
 or the microphone input.
 You can edit your music - the input display window shows you what you are
 working on in music notation - and you can playback to check how it sounds.
 The Print View window shows the final printed score, typeset to the highest
 standards used in the music publishing industry - thanks to the Lilypond
 music typesetting program.
\end_layout

\begin_layout Standard
This separation of the final typesetting window from the input display avoids
 the constant dragging about of overlapping notation which is typical of
 music notation programs.
 It also means you are less likely to input a slur when you mean a tie,
 or a whole note rest when you mean a whole measure rest, for example -
 these often look similar in the typeset and are easily confused, but Denemo's
 input display makes clear the distinction.
 Nevertheless, if you do wish to tweak the appearance dragging and re-positionin
g of some notation is possible on the final typeset display.
\end_layout

\begin_layout Section
Input Methods
\end_layout

\begin_layout Standard
Most people will start with playing around with Denemo using the mouse,
 but by the time you are reading this you will want something more efficient.
 Try using the pc keyboard.
 By default, keys 
\family typewriter
a-g
\family default
 represent the note names and 
\family typewriter
0-6
\family default
 the different durations (whole note, half note etc).
 When the cursor is appending (blue) pressing key 
\family typewriter
0
\family default
 will insert a whole note at the cursor.
 Pressing the 
\family typewriter
a
\family default
 key will append the nearest A.
 If the duration of the next note is the same you can simply type the note
 name, it will use the last entered duration.
 There are keypresses (+/-, and plus/minus on the numeric keypad) to set
 sharp/flat/double-sharp/double-flat for the next entered note and to sharpen
 or flatten.
 Use +/- with the shift key to sharpen or flatten an existing note.
 Likewise, Shift with a number key edits the duration of a note.
 
\end_layout

\begin_layout Standard
When the cursor is moved on to a note (with the arrow key or mouse) the
 cursor turns green and then 
\family typewriter
a
\family default
-
\family typewriter
g
\family default
 edits the note name.
 To insert a note before a note at the cursor use a double strike 
\family typewriter
A
\family default
,
\family typewriter
A-G
\family default
,
\family typewriter
G
\family default
.
 When the cursor is green the keys
\family typewriter
 0-6
\family default
 change the duration of the note, while Shift-
\family typewriter
0-6
\family default
 insert a note before the cursor.
 (If you use the numeric keypad you can use 
\family typewriter
Shift-KP 0-6
\family default
 for this).
 The arrow keys move the cursor around, the period key adds a dot while
 
\family typewriter
Alt-a-g
\family default
 add notes to the chord at the cursor.
 
\family typewriter
Ins
\family default
 inserts a note in a chord whether the cursor is on (green) or after (blue)
 a note, a double 
\family typewriter
Del
\family default
, 
\family typewriter
Del
\family default
 removes it.
 
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
When in the appending position the cursor shows as a large blue or red rectangle
 on a note-position.
 Blue indicates a note can be appended at that point without overflowing
 the measure.
 Red indicates that the measure is already full.
 When the cursor is a smaller green rectangle it indicates that you are
 not in the appending position: you can edit the note/object at the cursor
 or insert before it.
 The vertical blue line indicates the insertion point.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For a more detailed description of Denemo's various input methods, see 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:A-Survey-of-Input-Methods"

\end_inset

.
 You can find more shortcuts by exploring the menu system - e.g.
 under the Notes/Rests menu the Select Duration submenu gives Remove Dot
 with the shortcut Control-period shown in blue next to the command.
 
\end_layout

\begin_layout Standard
Alternatively, a list is available in the Help menu.
 There are thousands of commands in Denemo, so get to know the Command Center
 where you can search for commands by key words such as slur, ossia, beam,
 Da Capo, cresc.
 etc.
\end_layout

\begin_layout Standard
Initially, Denemo starts with tooltips popping up almost everywhere.
 When they become too annoying you can tame them with Help->Turn Excessive
 Tooltips (Off/On), and you can further delay the remaining tooltips appearing
 via Edit->Change Preferences.
\end_layout

\begin_layout Standard
And once you have stopped playing around with the mouse for entering notes
 you can hide the palettes at the side to give more room for the music display
 (right click and Edit Palette).
\end_layout

\begin_layout Subsection
Some Common Keyboard Shortcuts
\end_layout

\begin_layout Standard
Here are a few of the keyboard shortcuts that are commonly used in Denemo.
\end_layout

\begin_layout Itemize
Letters 
\family typewriter
a-g
\family default
 edit the note at the cursor to be A-G, if the cursor is in the appending
 position then notes are added.
 Letters 
\family typewriter
A-G
\family default
 (either 
\family typewriter
CapsLock
\family default
 or 
\family typewriter
Shift
\family default
) insert a note at the cursor.
 
\end_layout

\begin_layout Itemize
Numbers 
\family typewriter
0-6
\family default
 are used to refer to the note durations Whole Note ...
 64th Note.
 They insert a duration at the cursor, which you then give a pitch to with
 a note name.
 With the shift key held (or the CapsLock on) 
\family typewriter
0-6
\family default
 edits the duration of the note at the cursor.
 The corresponding Numeric Keypad keys can be used instead.
\end_layout

\begin_layout Itemize
The period (
\family typewriter
.
\family default
) dots a note, 
\family typewriter
Ctrl-.

\family default
 removes a dot, on the numeric keypad Decimal (.) cycles through dotted,
 double-dotted, no-dot.
\end_layout

\begin_layout Itemize

\family typewriter
Alt-0-6
\family default
 inserts a rest.
\end_layout

\begin_layout Itemize

\family typewriter
Alt-a-g
\family default
 Add notes to a chord.
 Or position the cursor and use 
\family typewriter
Insert
\family default
 to add a note, 
\family typewriter
Ctrl-Insert
\family default
 to remove it.
 
\end_layout

\begin_layout Itemize

\family typewriter
7
\family default
 starts a slur, 
\family typewriter
8
\family default
 extends it, while 
\family typewriter
9
\family default
 reduces it.
\end_layout

\begin_layout Itemize

\family typewriter
Shift-/
\family default
 inserts a cautionary accidental.
\end_layout

\begin_layout Itemize

\family typewriter
Esc
\family default
 switches between various views of the music which can allow more music
 on the screen at once.
\end_layout

\begin_layout Itemize

\family typewriter
TAB
\family default
 alternately inserts a start or stop triplet marker.
\end_layout

\begin_layout Itemize
Multiply (
\family typewriter
*
\family default
 on the numeric keypad) ties/unties the note at the cursor.
\end_layout

\begin_layout Itemize
Divide (
\family typewriter
/
\family default
 on the numeric keypad) sets/usets the note at the cursor as a grace note.
\end_layout

\begin_layout Itemize
Add/Subtract (
\family typewriter
+/-
\family default
 on the numeric keypad) sharpens/flattens the note at the cursor.
\end_layout

\begin_layout Standard
Two-key shortcuts are also available such as "
\family typewriter
B
\family default
,
\family typewriter
s
\family default
" for start repeat barline and "
\family typewriter
B
\family default
,
\family typewriter
e
\family default
" for end repeat barline.
 
\end_layout

\begin_layout Subsection
Some Common Mouse Shortcuts
\end_layout

\begin_layout Standard
Here are a few of the mouse shortcuts that are commonly used in Denemo (keyboard
s may vary, for control, shift, alt etc modifiers).
 Note that under the Input menu is an option to turn on more mouse-friendly
 buttons, this is the default for Windows users.
\end_layout

\begin_layout Itemize
Scroll Wheel pans up/down to bring staffs out of view into the window.
\end_layout

\begin_layout Itemize

\family typewriter
Shift
\family default
 Key and Scroll Wheel pans the score left/right.
\end_layout

\begin_layout Itemize

\family typewriter
Control
\family default
 Key and Scroll Wheel zooms.
\end_layout

\begin_layout Itemize
Right-button click edits at the cursor.
\end_layout

\begin_layout Itemize
Double-click brings up the Object Inspector on the current object, from
 there you can launch the Object Editor.
\end_layout

\begin_layout Itemize

\family typewriter
Shift
\family default
-right-button click edits things attached to the object at the cursor.
\end_layout

\begin_layout Itemize
Double click left-button describes the object clicked on.
\end_layout

\begin_layout Itemize

\family typewriter
Ctrl-Shift
\family default
 left-button drag allow you to move stuff in the display if it is cluttered.
 Typesettting is not affected.
\end_layout

\begin_layout Itemize

\family typewriter
Ctrl-Shift
\family default
 Key and Right mouse button gives the menu of directives to insert at the
 cursor.
\end_layout

\begin_layout Itemize

\family typewriter
Shift
\family default
 Key and Left mouse button drags notes up and down.
\end_layout

\begin_layout Subsection
Some Common Uses of MIDI in
\end_layout

\begin_layout Standard
The MIDI keyboard too can be customized to perform different actions.
 Usually, playing notes adds or edits the score (like hitting note names
 at the pc-keyboard).
 With the sustain pedal pressed chords are generated (the Alt key can be
 used for this too).
 If the interval between the notes played is augmented or diminished it
 is played on a different channel, so that you are alerted to possible pitch
 spelling errors (e.g.
 inputting A-sharp for B-flat).
 By holding down the 
\family typewriter
Ctrl
\family default
 key a score can be checked by playing the notes - the cursor only advances
 if the correct note is played, and the 
\family typewriter
Shift
\family default
 key can be held down to route the MIDI keyboard straight to the output
 (e.g.
 to check a phrase before playing it in).
 There is a button in the MIDI-in Controls to do this too.
 The Pitch Bend controller can be used to set the range of sharps and flats
 to be used, and the modulation controller can be used to mark sections
 of the music.
 With the MIDI controller set as Input source (Input menu) the duration
 keys create pure durations (notes colored yellow/brown) - you can enter
 as much of the rhythm as you wish, and then play the notes on top.
\end_layout

\begin_layout Subsection
Note and Rest Entry Palettes
\end_layout

\begin_layout Standard
On starting Denemo for the very first time a series of palettes are placed
 near the main window with buttons to insert and change notes.
 For more serious use these just waste space, so by right clicking on them
 and choosing Edit this Palette they can be hidden.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Part
Using Denemo
\end_layout

\begin_layout Section
General Concepts
\end_layout

\begin_layout Standard
The unit of work in Denemo is a musical score, which can be saved in a single
 file (with .denemo suffix).
 This is represented on the screen by a "tab".
 If you have several tabs open at once they appear just above the music
 in the main window, and you can switch between them by clicking on the
 tab.
\end_layout

\begin_layout Standard
One score may contain several movements, which you can move between (
\family typewriter
PgUp
\family default
, 
\family typewriter
PgDown
\family default
), insert duplicate, merge and delete with the Movements menu.
 A movement is a continuous piece of music with titles etc.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
When you have more than one movement numbered buttons appear in the score
 titles bar for you to navigate by.
 The first thing on the status bar after any pending accidental is the movement
 number.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Within a movement there are staffs (arranged vertically) and within the
 staffs Denemo Objects.
 These can be notes, chords, key changes, time signature changes and Denemo
 Directives (see 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:Denemo-Directives"

\end_inset

).
 The notes and chords are displayed in conventional format (though not fully
 typeset).
 The Denemo Directives are used for most things that are not chords or notes
 etc: Metronome marks, repeat barlines etc are good examples.
 They can also be attached to chords, individual notes in a chord, to a
 staff as a whole and to the score as a whole; in this case the directive
 can be thought of as an attribute of the object it is attached to.
 Each Denemo Directive carries its own display method.
 For example the Close Repeat barline appears as a Denemo Object in the
 input display, while a Directive attached to a staff (e.g.
 Instrument Name, or Smaller Staff Size) may appear in a menu under a tools
 icon to the right of the staff.
 In the case of "Smaller Staff" the directive directs the LilyPond typesetter
 to make the staff smaller, and it can be edited from the menu under the
 tools icon to the left of the clef.
 Another tools icon appears if directives are attached to voices within
 a staff, again to the left of the clef, below the staff one.
\end_layout

\begin_layout Standard
If there is more than one voice on a staff it is best displayed on a separate
 staff in the Denemo Display, for ease of editing - the clef is drawn pale
 and there is no timesignature for such extra voices so it is easy to understand
 what is going on.
 The Print Preview window as usual shows the final typeset appearance.
\end_layout

\begin_layout Standard
In the Denemo display a cursor shows where the next note will be entered/edited.
 It is red for an over-full bar, blue for appending into an under-full one
 and green when editing (i.e.
 on an already entered object).
\end_layout

\begin_layout Standard
The menus in Denemo are unusual: they not only let you do some particular
 action, but also each menu item lets you add the command to a palette,
 enquire what the action does in more detail and set keyboard/mouse shortcuts
 for the action.
 A single keystroke can be set as a shortcut simply by pressing the key
 while the menu item is selected.
 All the extra functionality of menu items can be accessed by right-clicking
 the menu item, while the usual left click is for executing the action itself.
 The menus can always be torn off for working with particular items (e.g.
 working with different movements or with measures, dynamics etc.).
 When you place a command in a palette you can add to an existing palette
 or create a new one - you can choose or create any number of these, free-floati
ng or docked in the main display.
 Also available by right-clicking is creating new actions - often by modifying
 ones that are already there - using the Scheme scripting window.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
When a file is loaded it opens at the point where you left off editing it.
 The position and size of the window is restored as well as the position
 and size of the source pdf you are transcribing from.
\end_layout

\begin_layout Section
Denemo Main Window
\begin_inset Note Note
status open

\begin_layout Plain Layout
(Need new screenshots)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Denemo Main Window
\end_layout

\end_inset


\begin_inset Graphics
	filename images/denemomain.png
	lyxscale 80
	width 100text%

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The main window has menus and toolbars at the top, and palettes at top and/or
 right hand side.
 Which menus and palettes are shown are selected via the View menu.
 At the bottom is a status line showing which movement you are in and what
 sort of object the cursor is on.
 If there are any MIDI filters that active they will be noted at the right
 in the status bar.
 
\end_layout

\begin_layout Standard
In between is where the music input is displayed, the Denemo Display area.
 When zoomed out you see just the few measures you are working on.
 By dragging the red bar at the bottom of the score upwards you get space
 for more of the music.
 If you have many staffs they may not all fit: you can still drag the red
 bar upwards to see several lines of just one or two staffs for instance.
 You can hide staffs in the display if needed using the Staffs->Display
 Effects menu.
 If you need more room you can hide the menus (using the View Menu), and
 arrange a "page view" of the input music - useful when using playback.
\end_layout

\begin_layout Subsection
The Main Menubar
\end_layout

\begin_layout Standard
The Main Menubar has menus for overall control of the program.
 It contains the following submenus:
\end_layout

\begin_layout Itemize
File
\end_layout

\begin_layout Itemize
Navigation
\end_layout

\begin_layout Itemize
Edit
\end_layout

\begin_layout Itemize
View
\end_layout

\begin_layout Itemize
Input
\end_layout

\begin_layout Itemize
Playback
\end_layout

\begin_layout Itemize
More
\end_layout

\begin_layout Itemize
Educational
\end_layout

\begin_layout Itemize
Help
\end_layout

\begin_layout Subsubsection
File
\end_layout

\begin_layout Standard
Use the 
\series bold
File
\series default
 menu to perform global operations related to storing and retrieving from
 file systems, importing from MusicXML, MIDI, and LilyPond formats, printing
 full score or parts, exporting to MIDI, Ogg, Wav, LilyPond (parts or score),
 PDF and Png formats.
 This is also where you open PDF files containing source material - e.g.
 manuscripts - that you wish to transcribe or proof-reading comments you
 wish to incorporate in your score.
 Another sort of source material can be loaded from here - audio files can
 be loaded for transcribing as well as MIDI files.
\end_layout

\begin_layout Subsubsection
Edit
\end_layout

\begin_layout Standard
The 
\series bold
Edit
\series default
 menu collects command for editing: mostly editing objects in the display,
 the Denemo Objects
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:Denemo-Objects"

\end_inset

but also editing global properties of the score and your preferences.
 
\end_layout

\begin_layout Standard
There are commands for deleting the object before the cursor, the object
 at the cursor and for partially deleting from the object at the cursor
 (e.g.
 deleting notes from chords).
 Other delete commands are in the Object Menu (deleting movements, staffs,
 measures etc).
\end_layout

\begin_layout Standard
There are commands for editing all the Denemo Objects of a chosen type across
 the whole of a score.
 Commands for managing 
\emph on
the selection 
\emph default
are also here.
 Editing using the keyboard to invoke a palette button is here too (usual
 shortcut is 
\family typewriter
p
\family default
).
\end_layout

\begin_layout Subsubsection
View
\end_layout

\begin_layout Standard
Use the 
\series bold
View
\series default
 menu to toggle toolbars and palettes used with the mouse.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="17" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="left" valignment="top" width="30text%">
<column alignment="left" valignment="top" width="70text%">
<row endhead="true" endfirsthead="true">
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Menu Item
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hide/Show Menus
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Three ways of showing the Denemo display area are supported.
 With/without the menus and as a multiline page (actually, any page can
 be a multi-line page, but usually the third one is chosen for this.
 This command cycles through the three displays - usually the Escape key
 is the shortcut.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Typeset Music
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Shows the score as engraved by the LilyPond typesetter.
 Some things such as the shape of slurs and position of marks can be edited
 here graphically.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Command Center
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Search for commands by entering likely words, set up one key or two key
 shortcuts, load customized shortcuts or commands ...
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Score Layout
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Show the score layouts associated with this score.
 The score layout is the final section of the LilyPond syntax that describes
 how to layout the staffs, voices, lyrics, titles etc.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Lyrics
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Shows any lyrics for the current staff/voice.
 Each verse has its own tab, when selected the lyric syllables are underlaid
 in the Denemo display, so you can adjust by typing in the lyrics view window
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Snippets
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Shows a menu bar with snippets - a selection of Denemo Objects used either
 for pasting or to define a rhythmic pattern to be followed when entering
 pitches.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Tools
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The conventional icons for Open, Print etc
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Playback Controls
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
When checked a set of playback/record controls are placed above the display
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Midi In Control
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
When checked a set of controls for a connected MIDI keyboard are placed
 above the display
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Score Titles, Controls etc
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If this is checked any Titles, indent settings etc applying to the score
 and movement can be shown as buttons above the display.
 They must be created with their graphic field set for this.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Object Menu
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Menus of all the Denemo commands listed under type of object from Score
 down to the types of Denemo Objects.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LilyPond
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pops up a window for customizing the syntax that Denemo generates for the
 LilyPond engraver to typeset
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Scheme Script
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pops up a window for showing scripts written in Scheme.
 These can be executed or saved as new commands.
 Sequences of commands can be recorded here.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Score
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
This hides/shows the main Denemo display.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Palettes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gives access to palettes of buttons that can be arraged to make commands
 available via mouse or keyboard (via the Activate Palette Button command).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Display Zoom
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Zoom the main Denemo display (usually done with ctrl-mouse wheel).
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
Input
\end_layout

\begin_layout Standard
Use the 
\series bold
Input
\series default
 menu to select external sources (Audio from the Mic input or MIDI) for
 inputting notes to Denemo.
 To use these you should review the settings in Edit->Change Preferences
 MIDI and audio tabs first - change the setting for the backend from 
\begin_inset Quotes eld
\end_inset

default
\begin_inset Quotes erd
\end_inset

 to the specific controller you have.
\end_layout

\begin_layout Standard
Here too there are commands to change the way the inputs (keyboard, mouse
 and MIDI) behave.
\end_layout

\begin_layout Subsubsection
More
\end_layout

\begin_layout Standard
Use the 
\series bold
More
\series default
 menu add commands to Denemo.
 Extra commands are available (those which not everyone will want) via this
 menu.
 More Commands gives commands shipped with Denemo, while My Commands gives
 ones that you have created locally.
 Note that the extra commands can also be loaded at the menu where you are
 looking for them (you right-click on a menu item, and if there are more
 commands for that menu the More Commands for this Menu item will show),
 
\end_layout

\begin_layout Subsubsection
Playback
\end_layout

\begin_layout Standard
Use the 
\series bold
Playback
\series default
 menu to listen to the current movement.
 Denemo lets you hear your score, using an internal synthesizer.
 There are commands to play through the all the notes or to observe repeats
 or to play just the chord or notes at the cursor and to play at a shifted
 pitch.
\end_layout

\begin_layout Standard
.
\end_layout

\begin_layout Subsubsection
Help
\end_layout

\begin_layout Standard
Use the 
\series bold
Help
\series default
 menu to get help using Denemo.
 A list of the shortcuts is available (including any you have set yourself),
 a feature-packed score can be loaded, the excessive help can be tamed,
 and your browser can be launched on the Denemo chat room for asking questions
 directly from other users.
\end_layout

\begin_layout Subsection
Toolbar
\end_layout

\begin_layout Standard
Use the Toolbar to access common Denemo commands via a mouse click.
 The Toolbar contains the following icons:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="left" valignment="top" width="80text%">
<row endhead="true" endfirsthead="true">
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Icon
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/new.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Creates a new document.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/open.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Opens the Open File dialog box.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/save.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Saves the current file
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/print.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Runs LilyPond to convert the current file to PDF and sends it to the printer
 for printing
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/undo.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Undoes the last action.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/redo.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Redoes the previous undo action.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/cut.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Cuts the current selection to the clipboard.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/copy.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Copies the selected notation to the clipboard.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/paste.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pastes the current clipboard item at the cursor position; to be safe always
 create blank measures to fit.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/gotobegin.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Jumps to the first measure of the movement.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/gotoend.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Jumps to the last measure of the movement.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Playback Controls
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/playbackcontrols.png

\end_inset


\end_layout

\begin_layout Standard
The playback starts at the playback start marker (a line in green down the
 score in the Denemo Display) and stops at the playback end marker (a red
 line).
 These lines are not displayed all the time, just once the play has been
 used at least once.
 The start/end markers can be altered with the arrow keys on either side
 of the Play and Record buttons.
 The arrows to the left adjust the playback start, those to the right the
 playback end (hover over the arrows for details).
\end_layout

\begin_layout Standard
Playing of sections of the music and looping is possible (including editing
 as the music loops, so that you can listen to different possibilities)
 as well as recording the audio output (mixed with anything you play on
 your MIDI keyboard if you have recording set in the MIDI controls).
\end_layout

\begin_layout Standard
The master tempo and volume can be set, which will be overridden by tempo
 and dynamics placed in the music.
\end_layout

\begin_layout Standard
Recording the audio output is also possible as well as real-time slow down
 of the audio playing back (not to be confused with simply setting a slower
 tempo!).
 This last is used when transcribing from audio
\end_layout

\begin_layout Subsection
Midi In Controls
\end_layout

\begin_layout Standard
These are the controls for a MIDI keyboard attached to the computer.
 You should set the MIDI Input Device to your device in the Preferences
 to be sure all features are working.
\end_layout

\begin_layout Standard
The Enharmonic Selection control lets you determine what accidental will
 be used for the MIDI notes - e.g whether to enter C-sharp or D-flat.
 As you enter music if you enter an augmented or dimished interval a different
 instrument is used which helps you avoid pitch-spelling errors.
 (See Edit->Change Preferences->Audio pitch spelling channel/program to
 turn this off/change instrument).
\end_layout

\begin_layout Standard
[
\series bold
Appending/Editing
\series default
] button: This shows how MIDI in will be treated.
 Press Control/Shift/Alt keys to modify or click and select Listening to
 input MIDI, Checking notes in the score against input MIDI or Appending/Editing
 at the cursor.
\end_layout

\begin_layout Standard
[
\series bold
Switch to Play Along Playback
\series default
] button: When you press Play with this option set, the music will not advance
 past the cursor until you play the note.
 (Mute the current staff to prevent double sounding of notes)
\end_layout

\begin_layout Standard
The [
\series bold
record
\series default
] button allows you to record from your MIDI keyboard while the score is
 playing back.
 (Press MIDI record the Play).
 The MIDI recording will be played back with the score, and can be converted
 to notation or deleted.
\end_layout

\begin_layout Subsection
Object Menu Bar
\end_layout

\begin_layout Standard
The object menu bar gives a set of menus give ordered by the objects (notes,
 staffs, measures ...) that they relate to.
 This division cannot be perfect - some activities could be placed in different
 menus, so you need to be prepared to search for commands using the 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sub:The-Command-Center"

\end_inset

.
\end_layout

\begin_layout Standard
These are the menus on the Object Menu Bar with a brief description of what
 they hold.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="13" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Menu Item
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Score
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Settings that apply to the whole score.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Movements
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Insert/remove navigate, change the properties of movements.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Staffs/Voices
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Insert/remove, navigate, swap, change the properties of staffs or voices.
 (Voices in this context mean a staff of music that is typeset on the same
 staff as the preceding voice).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Clefs
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Insert clef change or set the initial clef.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Keys
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Insert a key change or set the initial key
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Time Signatures
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Insert a change of time signature or set the initial time signature, control
 the typeset appearance.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Measures
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Insert/remove navigate measures.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Chords
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Insert/remove/alter notes of a chord.
 Note that Chord Symbols can created markings on notes (see Notes/Rests
 menu) or as a way of displaying chords entered on a staff (see Staff/Voices
 menu)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Notes/Rests
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Menu items for inserting/changing/deleting note and rests, beaming, ties,
 slurs, setting the notehead style, grace notes, triplets, transposing,
 markings (e.g.
 hairpins) attached to notes and more 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Directives
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
These are objects inserted between the notes of a score to place marks or
 start/stop spanning effects such as textual cresc.
 dim., cadenzas, ottava, fret diagrams and more.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Notation Magick
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Create and manipulate music auto-magick-ally.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Lyrics
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Create and lyric verses for the current staff.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Object Menus
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Note: Dynamics, Slurs, Trills, Tempo Indications etc are in the Notes/Rests
 menu (if attached to a note or chord) or Directives menu (if standalone
 objects) .
 The advantage of attaching them to a note is that they can be moved around
 as a unit, but the standalone objects are generally easier to drag in the
 Print View should that be needed.
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
ScoreMenu
\end_layout

\begin_layout Standard
The score menu lets you control things that apply to all the movements of
 the current score.
 Also here is the Check Score command which should be your first port of
 call if your score will not typeset.
\end_layout

\begin_layout Standard
The Score Properties command gives access to some built-in properties that
 affect the whole piece - paper size and display apperance.
 
\end_layout

\begin_layout Standard
With Edit Directives you can edit directives that apply to all the movements,
 most of the rest of the commands create these Denemo Directives attaching
 them to the score under several categories (layout, paper, header etc).
\end_layout

\begin_layout Standard
Titles submenu: There are two sorts of titles.
 Book titles have a separate title page with titles for individual movements
 which can be listed in an automatically generated table of contents.
 Simple titles give a Title and (optionally) movement titles on the same
 page.
 
\end_layout

\begin_layout Standard
Comments (critical comments) can be place on chords in the score and these
 can be automatically collected into an appendix using the Book Titles->Epilog
 submenu.
\end_layout

\begin_layout Standard
A Table of Contents can be automatically generated from the movement titles
 by setting Book Titles->Table of Contents Title.
\end_layout

\begin_layout Standard
Graphic title pages can also be created.
 
\end_layout

\begin_layout Subsubsection
Movements Menu
\end_layout

\begin_layout Standard
As with the Score Menu there may be Denemo Directives attached to the movement
 - e.g titles to be placed at the head of the movement will have a Denemo
 Directive associated with them.
 Other controls that can be applied on a per-movement basis include the
 barline and notehead style, printing of a custos at line ends, the indent
 before the first system (which can also be set on the score-wide basis).
\end_layout

\begin_layout Standard
Various score checking routines work at movement level from this menu.
\end_layout

\begin_layout Subsubsection
Staff/Voices Menu
\end_layout

\begin_layout Standard
Things such as the music crossing to another staff, or Ossia staffs are
 contained here, along with commands for deleting parts of the staff, setting
 up multi-measure rests for a whole staff, muting the staff during playback
\end_layout

\begin_layout Subsubsection*
The Staff Properties Submenu
\end_layout

\begin_layout Standard
This covers such things as the type of staff (e.g.
 Normal Notation, Tablature, Chord Symbols, Fret Diagrams) as well as the
 staff appearance and the playback instrument, instrument name or ambitus
 to be typeset at the start of the staff and more.
\end_layout

\begin_layout Subsubsection*
The Voices Submenu
\end_layout

\begin_layout Standard

\emph on
Voices
\emph default
 in Denemo are like staffs but are typeset on the preceding staff to achieve
 single-staff polyphony.
 The Denemo Display is normally set to display any extra voices on a separate
 staff so as to make it easy to work with - the voices have their clef displayed
 in yellow and do not show a key signature as these are supplied by the
 main staff (or 
\begin_inset Quotes eld
\end_inset

primary voice
\begin_inset Quotes erd
\end_inset

).
 Voices will also normally be assigned to voice numbers 1,2,3,4 using the
 Initial Voice commands in this menu (this controls the stemming, slur positions
 etc).
 Voices can change their voice number during the music - the commands for
 this are in the Directives->Typesettter->Voices menu as they insert stem
 change objects in between the notes.
\end_layout

\begin_layout Subsubsection*
The Staff Groupings (Braces) Submenu
\end_layout

\begin_layout Standard
The braces at the start of each system are controlled from here.
\end_layout

\begin_layout Subsubsection
Clefs Menu
\end_layout

\begin_layout Subsubsection
Keys Menu
\end_layout

\begin_layout Subsubsection
Time Signatures Menu
\end_layout

\begin_layout Subsubsection
Measures Menu
\end_layout

\begin_layout Subsubsection
Chords Menu
\end_layout

\begin_layout Subsubsection
Notes/Rests 
\end_layout

\begin_layout Subsubsection
Directives 
\end_layout

\begin_layout Subsubsection
Lyrics 
\end_layout

\begin_layout Standard
To add lyrics to a staff move the cursor onto the staff and choose Add Lyric
 Verse.
 You need to have the Lyrics View visible (see View menu).
 Each verse has a separate tab, with the current verse for the current staff
 being visible at any one time.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
This means that you will see the lyrics for the current staff disappear
 from the Display Window when you switch staffs, which can be disconcerting,
 but saves space in the display.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Stanza numbers can be entered as well as font-changing commands.
 Use 
\family typewriter
Melismata
\family default
 command to extend syllables over more notes.
 The lyrics menu also contains a command 
\begin_inset Quotes eld
\end_inset

Edit Lyric at Cursor
\begin_inset Quotes erd
\end_inset

 ( Ctrl-l, Ctrl-l) which finds the place in the lyrics corresponding to
 the cursor position allowing you to edit the syllable that underlies the
 current note.
 Verses can be typeset in columns at the end by using command Typeset Verses
 at End which invokes the external Inkscape (or other) editor.
\end_layout

\begin_layout Subsubsection
Notation Magick Menu
\end_layout

\begin_layout Subsection
Palettes
\end_layout

\begin_layout Standard
Palettes are collections of commands arranged as a column, row or grid of
 buttons either in a separate window or docked in the Main Window.
\end_layout

\begin_layout Standard
These commands can be executed by clicking with the mouse or typing 
\family typewriter
p
\family default
 followed by (part of) the label of the button followed by the 
\family typewriter
Enter 
\emph on
or
\emph default
 Return
\family default
 key.
 (The palette must be selected - you can do this while typing the label
 or by using a button).
\end_layout

\begin_layout Standard
In the View menu you can select palettes of commands to use.
 Palette items can be invoked from the keyboard (see the Edit Menu) or by
 clicking on them.
 Right-clicking on a palette button allows you to edit the button or the
 entire palette.
 You can dock the palette in the main display, arrange it as a column, line
 or block and much more.
\end_layout

\begin_layout Standard
You should make palettes your best friend - when you find a command in the
 menu system that you need right click on it and choose Add to Palette.
 This way you will build up one or more collections of commands that you
 need.
 By right clicking on a palette button you can choose a name for the command
 that suits you, and even make special notes about its use in the tooltip.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:The-Command-Center"

\end_inset

The Command Center
\end_layout

\begin_layout Standard
In the View menu you can show the Command Center.
 This has a list of all the Denemo commands, hidden or not, with their shortcut(
s).
 The box at the top left gives full details of the currently selected command
 and its location in the menu system.
 Below that is a search box for finding any command you need by matching
 words in its description or label.
 By choosing 
\begin_inset Quotes eld
\end_inset

Fuzzy
\begin_inset Quotes erd
\end_inset

 you will make the search less strict - one word could be missing.
\end_layout

\begin_layout Standard
The search starts as you type in the first letter of any key words you want,
 so check after each letter to see if you have found the command you need.
 To search for further commands matching your keywords press the arrow next
 to the search box.
 
\end_layout

\begin_layout Standard
The command center is also where you can set one-key shortcuts such as 
\family typewriter
Ctrl-x
\family default
 and two-key shortcuts such as 
\family typewriter
Shift-a
\family default
 followed by 
\family typewriter
Shift-a
\family default
 (which is written as 
\family typewriter
A
\family default
,
\family typewriter
A
\family default
 next to the command).
 You can also lookup which command responds to a given shortcut, and execute
 the selected command here.
\end_layout

\begin_layout Standard
In addition you can save and load whole sets of shortcuts and commands.
 
\end_layout

\begin_layout Subsection
Music Snippets
\end_layout

\begin_layout Subsubsection
Overview
\end_layout

\begin_layout Standard
Music snippets are short selections from a voice which can be stored on
 the Snippet tool bar.
 They have two main uses: they can act as a repository of 
\begin_inset Quotes eld
\end_inset

motifs
\begin_inset Quotes erd
\end_inset

 which can be inserted (
\family typewriter
Ctrl-Space
\family default
) at the cursor, and they can be used as an extension to the 
\begin_inset Quotes eld
\end_inset

prevailing duration
\begin_inset Quotes erd
\end_inset

 idea.
 In the second use, by selecting a snippet as you enter pitches the durations
 are assigned from the next step in the snippet.
 The first case is especially useful when entering a complex rhythm which
 is repeated many times in the piece.
 In all cases the snippet can contain all sorts of attributes and markings,
 slurs, beaming indications, ornaments etc, and these will then all be entered
 with a single keypress or as you add pitches.
\end_layout

\begin_layout Subsubsection
Details
\end_layout

\begin_layout Standard
The Snippet tool bar has only one button initially: 
\begin_inset Quotes eld
\end_inset

Create
\begin_inset Quotes erd
\end_inset

.
 This button lets you create a snippet from the current selection.
 The selection should be a contiguous selection of objects in a single voice.
 Once created the snippet appears on the snippet tool bar as a button -
 the label is generated to indicate the content, and this label can be further
 edited by clicking on the button and choosing 
\begin_inset Quotes eld
\end_inset

Edit Label
\begin_inset Quotes erd
\end_inset

.
 Other options on clicking a snippet button are to insert the snippet, to
 select the snippet (in which case as you enter pitches they follow the
 rhythm of the snippet, including any slurs, trills, or articulations that
 are in the snippet) etc.
 
\end_layout

\begin_layout Standard

\family typewriter
Ctrl-Space 
\family default
inserts the selected snippet or (if none is selected) inserts the snippet
 that you specify by number.
 
\family typewriter
Shift-Space
\family default
 selects the next snippet (or first if none selected), to unselect a snippet
 choose a duration (0, 1...) to be used instead for entering pitches.
\end_layout

\begin_layout Standard
In the insertion case, you may have two or three snippets that apply to
 a given score - special bits of text that appear over notes for example
 - and you can insert them using 
\family typewriter
Ctrl-Space
\family default
, 1 (or 2 or 3 ...) as needed.
\end_layout

\begin_layout Standard
In the pattern-following case you will be selecting snippets using 
\family typewriter
Shift-Space
\family default
 and then playing in notes (and backing up using backspace in case of error
 - the pattern backs up for you).
\end_layout

\begin_layout Section
The Print View Window
\end_layout

\begin_layout Standard
The print view window is shown by checking View->Print View.
 This view shows the typeset score as it will be printed on paper.
 It also allows you to locate the place in the Denemo Display belonging
 to a particular note or mark in the score, and allows some graphical editing
 of the score.
\end_layout

\begin_layout Subsection
The Buttons
\end_layout

\begin_layout Itemize
Print starts your system's print dialog to send the typeset score to a printer
 or file.
\end_layout

\begin_layout Itemize
PDF to generate a PDF document from the score.
\end_layout

\begin_layout Itemize
Typeset.
 Offers a menu of score layouts to typeset.
 If only one is available (the Default Score Layout) then it typesets that
 one.
\end_layout

\begin_layout Itemize
Movement.
 Creates a Score Layout comprising the current movement, and then typesets
 it .
\end_layout

\begin_layout Itemize
Part.
 Creates a Score Layout from the current Part and typesets that.
 A 
\emph on
part 
\emph default
comprises all the staffs with the part name of the current staff.
 (The part name of a staff is shown above the initial clef with a green
 patch on it).
\end_layout

\begin_layout Itemize
Refresh.
 Repeats that last typeset command.
 For example, if Part was the last then it typesets the current part (which
 may be different from the one last typeset).
\end_layout

\begin_layout Itemize
Continuous/Manual.
 This both indicates the current mode of typesetting and acts as a menu
 for altering it and choosing how much to typeset in continuous mode.
 In continuous mode the score is re-typeset every time it is altered - choose
 the range if the score is large so that it refreshes quickly.
 For entering music rapidly set this to Manual, and re-typeset on demand.
\end_layout

\begin_layout Itemize
Duplex.
 Changes the view to show how two-sided printing will work out for page
 turns.
\end_layout

\begin_layout Itemize
Next, Previous.
 Navigate to the next/previous page of the score.
 You can scroll or drag as well.
\end_layout

\begin_layout Subsection
Mouse Controls
\begin_inset CommandInset label
LatexCommand label
name "sub:Mouse-Controls"

\end_inset


\end_layout

\begin_layout Standard
The mouse scroll wheel enables vertical panning and with Shift horizontal
 panning.
 With Control pressed you can zoom the view, which is very important for
 re-shaping slurs.
 Right click for help with tweaking beam angles, slurs etc.
\end_layout

\begin_layout Standard
Right clicking in a blank area of the typeset view (normal cursor) gives
 a menu providing help and allowing you to typeset with the control points
 for curves and the location points of objects marked as red dots and crosses.
\end_layout

\begin_layout Subsection
Editing in the Print View
\end_layout

\begin_layout Standard
Clicking on the typeset score can locate the place in the Denemo Display
 belonging to it.
 For this to work look for the 
\begin_inset Quotes eld
\end_inset

hand
\begin_inset Quotes erd
\end_inset

 pointer as you move the mouse over the typeset score.
 Use a big enough zoom factor to make this easy.
 The hand pointer indicates a place where if you click the Denemo Cursor
 will move to the Denemo Object that belongs to that feature.
\end_layout

\begin_layout Subsection
Editing Positions and Padding
\end_layout

\begin_layout Standard
Right clicking on objects in this pane allows you to drag items that LilyPond
 has positioned badly.
 Alternatively, you can select an amount of padding to apply to some objects
 so that they keep their distance from other items in the score.
 This is generally a better way of indicating that it is too close to something
 else, since other objects will move away from it as needed - that is, if
 you later edit something it will behave more intelligently.
\end_layout

\begin_layout Subsection
Re-shaping Slurs and Ties
\end_layout

\begin_layout Standard
Slurs and beaming can also be altered here.
 When you right-click on a slur or tie the Denemo Cursor moves to the note
 where the slur starts and you are offered the chance to edit the shape
 of the curve.
 Choose a large zoom factor before you begin, and turn on the control points
 (red dots and crosses) as described 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sub:Mouse-Controls"

\end_inset

above.
 Then right click on the curve and choose Edit Shape.
 You have to click on the reference point first - this is on the center-line
 of the staff at the horizontal position of the notehead where the curve
 starts - this is marked with a red dot.
 Then you click and drag on the four 
\begin_inset Quotes eld
\end_inset

control-points
\begin_inset Quotes erd
\end_inset

 that define the shape of the curve.
 Once the shape looks good, right click in a blank area and click Apply.
 
\end_layout

\begin_layout Standard
With practice you can skip the use of the red dots and crosses as you can
 guess where they would be.
\end_layout

\begin_layout Subsection
Adding Line or Page Breaks.
\end_layout

\begin_layout Standard
Page or line breaks added by right-clicking on a note at a barline and choosing
 from the menu.
 The click positions the Denemo Cursor and then the page or line break command
 is run just as if you were working directly in the Denemo Display.
\end_layout

\begin_layout Section
The Object Inspector
\begin_inset CommandInset label
LatexCommand label
name "sec:The-Object-Inspector"

\end_inset


\end_layout

\begin_layout Standard
The Object Inspector is shown by clicking View->Object Inspector, or just
 double-clicking on an object in the Denemo Display.
 It gives comprehensive information about the object at the cursor.
 This includes directives like ornaments, dynamic markings, fingerings that
 may be attached to the object.
 The Object Inspector is sensitive to which note of a chord the cursor is
 on, so that things like fingerings (which can vary from note to note within
 a chord) are displayed individually as you move the cursor up and down
 a chord.
 You can step through the notes of a chord using the button marked 
\begin_inset Quotes eld
\end_inset

Inspect the next note in chord
\begin_inset Quotes erd
\end_inset

 which will work upwards through the notes before wrapping round to start
 at the lowest note.
\end_layout

\begin_layout Standard
For many directives full information about which command created the directive
 and where it is to be found in the menu system is given, and the description
 of the command's behavior.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Some older commands don't have full information but the tag associated with
 the directive will usually help in tracking it down.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Object Inspector automatically updates itself as you move the cursor
 around.
 
\end_layout

\begin_layout Standard
The Edit button will launch the 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:Object-Editor"

\end_inset

.
\end_layout

\begin_layout Standard
Use the window controls on the Object Inspector's title bar to dismiss the
 window.
\end_layout

\begin_layout Section
Object Editor
\begin_inset CommandInset label
LatexCommand label
name "sec:Object-Editor"

\end_inset


\end_layout

\begin_layout Standard
The Object Editor allows you to edit the current Denemo Object.
 It can be launched from the Edit Menu or from the 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:The-Object-Inspector"

\end_inset

.
\end_layout

\begin_layout Standard
This window is 
\emph on
modal, 
\emph default
that is you cannot interact with Denemo outside of the editor until you
 have dismissed it.
 To warn you of this the pointer turns to an X if you try to interact with
 the Denemo Input Display when the Object Editor is still open.
 Buttons are provided to move on to editing the next (or previous) object.
\end_layout

\begin_layout Standard
As with the Object Inspector the Object Editor is sensitive to the cursor
 height, with the same navigation control to move through the notes of a
 chord so as to allow editing the detail of each note.
 
\end_layout

\begin_layout Section
The Score Layouts Window
\end_layout

\begin_layout Standard
The score layouts window is shown by checking View->Score Layout.
 
\end_layout

\begin_layout Standard
You can use layouts to print the music in different ways.
 For example, one layout may have the score transposed, or be for just two
 parts printed together.
\end_layout

\begin_layout Standard
You can customize any layout in this window - positioning lyrics above the
 staff rather than below for example, or setting the staff groupings.
\end_layout

\begin_layout Standard
You can make Denemo Directives conditional on the score layout, so that
 for example a page break only applies when printing the full score, or
 is just for printing one part.
 In this way if, for example, one part does not need separate first and
 second time bars, then these can be marked as not being for that layout.
 See Directives->Conditional Directives for setting this.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
The score layout can only be edited graphically when first created.
 Once re-loaded from disk it is reduced to its LilyPond text form and can
 then only be edited in the LilyPond view.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Score and Movement Button Bars
\end_layout

\begin_layout Standard
The View->Titles, Buttons etc" checkbox makes two horizontal button bars
 visible (if they have buttons on them).
 What the buttons show are titles/composer etc for the score and for the
 current movement.
 The score button bar holds the movement indicator buttons for scores that
 have several movements - you can click on one of these to move quickly
 to a different movement.
 In addition other score-wide settings create buttons on the score titles
 bar and movement wide settings on the movement titles bar.
 The menu items that populate these are under Score->Titles etc., and Movement->T
itles etc and other menus.
 
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:A-Survey-of-Input-Methods"

\end_inset

A Survey of the Input Methods
\end_layout

\begin_layout Subsection
Introduction
\end_layout

\begin_layout Standard
Denemo allows you to explore all the actions (insert/delete/edit/navigate...)
 using the menus.
 So, for example, inserting notes can be found under Notes/Rests while inserting
 a Staff comes under Staffs/Voices.
 When you have found the action you need hovering over the item will give
 an explanation of what it does.
 The keyboard or mouse shortcut to use for the command is in blue on the
 right.
 You can set the keyboard shortcut just by pressing the desired key while
 the menu item is selected.
 You can right click on the menu item to set a a two-key keyboard shortcut
 or mouse shortcut to activate the action.
 In addition you can customize the mouse actions to initiate commands, and
 set the cursor that will show while certain mouse conditions apply.
\end_layout

\begin_layout Standard
Denemo offers several ways of entering music: typing at the keyboard, playing
 in via a MIDI keyboard (controller), playing in acoustically using a microphone
 or choosing items from the menu system.
 
\end_layout

\begin_layout Standard
Using the menus for everything would be very slow, but next to each menu
 item is the keypress that you can use instead.
 If there is no keypress shown, and you want to use that item often, then
 right click on the menu item and you can set a key combination for that
 menu action.
 Right clicking is also useful for getting a description of what the menu
 action is.
 
\end_layout

\begin_layout Standard
Typing at the keyboard can be very fast, if you forget which keypress you
 need you can consult the menu system to find out.
 This method is good for touch typists.
\end_layout

\begin_layout Standard
For entering a lot of already written-out music, playing the music in via
 a MIDI keyboard or microphone can offer the fastest and most musical method.
\end_layout

\begin_layout Standard
One way to do this is enter the music as pure rhythms, ignoring the note
 names.
 The durations show as yellow/brown notes.
 Each duration sounds its own pitch and length as you enter the durations.
 As you start each measure the bell will sound so that you can keep your
 eyes on the score you are copying without needing to look up and check
 that you haven't miss-typed.
 If you are a reading musician you will find that you tap in the rhythm
 rhythmically which helps to keep your place in the piece you are entering.
 
\end_layout

\begin_layout Standard
Once you have entered the rhythms for one or two measures you play the notes
 via MIDI - they automatically fill in the rhythm for you.
 When you play notes in via MIDI they give their pitches to the rhythm you
 have notated.
 By this means you can enter a piece of music in the time taken to play
 it twice - once to give the rhythm and once to give the pitches.
 If the piece modulates strongly you may need to shift the set of accidentals
 used to match the score.
 If entering pitches via a mic you need to navigate to the start point,
 but this isn't needed for MIDI in.
\end_layout

\begin_layout Subsection
Playing Notes into Denemo - MIDI
\end_layout

\begin_layout Standard
Denemo can take pitches directly from MIDI input.
 Select Input->Midi Input.
 The control panel allows you to choose the enharmonic range, the default
 centers around the initial key signature (e.g.
 E-flat to G-sharp for C-major).
 If you enter a diminished or augmented interval the note will be played
 in a separate MIDI channel which can be used to alert you to pitch-spelling
 mistakes (e.g.
 entering A-flat when G-sharp was meant, you will get a lot more augmented
 and dimished intervals if you have the enharmonic range set wrongly for
 your piece).
 Under Input->MIDI are various "MIDI filters" that allow you to control
 how the MIDI input is used: with none active the behavior is as if you
 had entered the notes using the pc-keyboard, but with the following advantages
 
\end_layout

\begin_layout Itemize
The octave, accidental and note name are all entered in one press of the
 MIDI key.
 The cursor automatically advances so you can continue to play in notes.
\end_layout

\begin_layout Itemize
The duration keys enter the yellow/brown duration-only notes, when you play
 a MIDI key the cursor automatically moves to the first of these.
\end_layout

\begin_layout Itemize
Holding down the 
\family typewriter
Alt
\family default
 key (or sustain pedal) lets you enter chords.
\end_layout

\begin_layout Itemize
Holding down the 
\family typewriter
Ctrl
\family default
 key lets you check the pitches of a piece already entered.
 The cursor only advances if the note played is the one at the cursor.
\end_layout

\begin_layout Itemize
Holding down the 
\family typewriter
Shift
\family default
 key lets you listen to the MIDI keyboard without affecting the score.
\end_layout

\begin_layout Itemize
The problem of entering the wrong enharmonic is largely avoided by Denemo's
 simple pitch-spelling strategy.
 The more extreme intervals are played in a separate MIDI channel so that
 if, for example you enter F - A-sharp it sounds quite distinct from F -
 B-flat.
\end_layout

\begin_layout Standard
The MIDI filters are scheme scripts, so they can be tailored to do whatever
 you wish.
 One example is a filter that enables you to enter Figured Bass figures
 by playing the notes corresponding to the figures while holding down the
 bass note.
 Another is the "AngryDelete" filter.
 With this filter on notes are entered normally with the cursor advancing
 automatically, but if you make a mistake and press the wrong note just
 hit the next one much louder and it will make the correction for you! MIDI
 filters are found under Input -> MIDI
\end_layout

\begin_layout Subsection
Playing Notes into Denemo - Audio (Soundcard Mic Input)
\end_layout

\begin_layout Standard
Denemo can listen for, and detect the pitch of notes on the mic input of
 the computer; it doesn't attempt to guess the rhythm - such systems do
 not work well - but you will find that playing the notes in time will help
 you to play them in, as well as make playing them in a musical experience
 rather than a chore.
\end_layout

\begin_layout Standard
Playing the notes in can be much quicker than using the keyboard since the
 note octave and accidental are all given just by playing the note.
 If you are able to play a musical instrument then this will probably be
 much faster for you than typing note names, octave shifts and accidentals
 at the computer keyboard.
 Using the headphones-out of an electronic keyboard avoids "noises-off"
 interfering with the pitch detection.
 Many microphones and pickups benefit from some pre-amplification - it is
 worth getting the level right before you begin.
\end_layout

\begin_layout Standard
When you select the Input->Audio on the Main Menu the Pitch Recognition
 window pops up.
 While the mouse pointer is inside the score drawing area the score is sensitive
 to pitches heard via the microphone input.
 The background colour of the score changes to show that the notes will
 be entered into the score.
 
\end_layout

\begin_layout Standard
There are two ways of using the pitch entry - Overlay mode (default) and
 Insert mode.
 The button marked Insert causes notes to be entered into the current measure
 in the prevailing rhythm - the mode is set to Insert for this.
 The button marked Overlays overlays the notes already present with the
 pitches you sound.
 There is a third button, marked Tuning, which is a state-of-the art musical
 instrument tuner.
\end_layout

\begin_layout Standard
Music is entered into the measure which holds the cursor.
 If you are overlaying a rhythm already entered, then the first un-overlayed
 note in the measure is overlayed by the note detected.
 You can delete the overlay using the regular delete keys, or clear them
 altogether if you want to start over in a measure.
 If you are in Insert mode then the notes detected will be inserted at the
 cursor position.
\end_layout

\begin_layout Standard
Use the enharmonic shift to select whether Bb or A# should be entered when
 you enter the given pitch - you can usefully go as far as B# and Fb.
\end_layout

\begin_layout Standard
Use the transpose control to shift up or down by octaves.
\end_layout

\begin_layout Standard
Most of the other settings would require study of the Aubio documentation
 to understand, but the one marked threshold may be useful to make the detection
 less sensitive to ambient noises if using a microphone with an acoustic
 instrument.
\end_layout

\begin_layout Standard
The best set-up is to plug the headphones-out socket of an electronic keyboard
 into the mic input, and choose a piano setting on the electronic keyboard.
\end_layout

\begin_layout Standard
If you don't have any musical instrument that you can plug directly into
 the mic in, then you can use an acoustic instrument with a microphone,
 in which case move your microphone closer or further from your instrument
 to get reliable detection.
 Too close and you get double detections, too far and you get missed ones.
 To check for good detection open a piece of music, set Overlay mode and
 put the cursor in the first measure and play the piece in â the notes should
 all turn blue if you have perfect detection.
 It is worth while getting perfect detection â more than one or two miss-detects
 per piece of music and you may want to use the Insert rather than the Overlay
 method.
\end_layout

\begin_layout Standard
The Audio Input button introduces a special entry mode where the pitches
 you play in will overlay the rhythm, appearing as blue notes.
 You can delete any wrong pitches using the usual delete keys, without deleting
 the rhythm.
 In fact if you have an "interloper" (an extra spurious note) you can delete
 it and the other pitches will all move along to their correct places.
\end_layout

\begin_layout Standard
Another method of playing music in acoustically doesn't involve entering
 the rhythm separately.
 For this select Input->Audio and then choose Insert instead of Overlays
 on the Pitch Recognition Panel that pops up.
 With Insert the sounded notes are entered as in the prevailing rhythm.
 The same applies if you have MIDI - by choosing a rhythm (e.g.
 half-note, quarter-note, or a custom rhythm pattern) and playing in the
 pitches you can enter the music into a blank score.
\end_layout

\begin_layout Subsection
Using the Denemo From the PC keyboard
\end_layout

\begin_layout Subsubsection
Note Entry
\end_layout

\begin_layout Standard
Basic Note entry is to type a number key 
\family typewriter
0-6
\family default
 for the duration of the note followed by a letter key 
\family typewriter
a-g
\family default
 for the note name.
 (The shorter duration notes are available, but the keys 
\family typewriter
7
\family default
,
\family typewriter
8
\family default
,
\family typewriter
9
\family default
 are used for starting and extending/reducing slurs).
 If the duration is the same as the last entered note then just the note
 name is needed.
 The duration can be dotted with the period key, and the octave adjusted
 with comma (for down) or apostrophe (for up).
\end_layout

\begin_layout Standard
When you append music by pressing a duration key with a MIDI controller
 active, you get a brown note, indicating a duration which has not been
 given a pitch.
 Once you have pressed a note-name it becomes that note printed in black.
 Prior to that it is a pure rhythm and will play back as a drum beat and
 will print as a space.
\end_layout

\begin_layout Standard
When not appending music, you need to use the 
\family typewriter
shift
\family default
 key to insert a new note, or set the 
\family typewriter
Caps Lock
\family default
.
 So 
\family typewriter
Shift-a
\family default
,
\family typewriter
Shift-a
\family default
 inserts the note A etc.
 Plain 
\family typewriter
a
\family default
 edits the note at the cursor to be an A.
 Likewise with the numeric keypad the 
\family typewriter
Shift
\family default
 key can be used to edit a note duration, while the plain number keys insert
 the duration of the note at the cursor.
 (If you do not have a numeric keypad, you have to use the number keys -
 best to plug in an additional USB keyboard with numeric keypad, they are
 very cheap nowadays).
\end_layout

\begin_layout Standard
Rests are entered with 
\family typewriter
Alt-0 Alt-1 ...
\end_layout

\begin_layout Standard
Spacer rests (that is non-printing rests as seen in keyboard polyphony)
 have shortcuts too 
\family typewriter
Mod4-0
\family default
 etc, where 
\family typewriter
Mod4
\family default
 is the key with a flag on it.
 However, on Windows machines you will need to reclaim the 
\family typewriter
Windows
\family default
 Mod-4 key from Microsoft or re-define the shortcuts, e.g.
 to 
\family typewriter
Shift-Alt-0
\family default
 etc.
\end_layout

\begin_layout Subsubsection
Chord Entry
\end_layout

\begin_layout Standard
The standard keybinding for entering a note in a chord is the 
\family typewriter
Insert
\family default
 key, 
\family typewriter
Ctrl-Insert
\family default
 or
\family typewriter
 Del
\family default
,
\family typewriter
Del
\family default
 deletes.
 The is inserted at the cursor height, use 
\family typewriter
-
\family default
 and 
\family typewriter
+
\family default
 to flatten/sharpen the note before you enter it (avoiding hearing both
 notes if you flatten/sharpen afterwards).
 There are also commands to enter a named note 
\family typewriter
Alt-a
\family default
, 
\family typewriter
Alt-b
\family default
...
 are the standard shortcuts for this.
 
\end_layout

\begin_layout Section
Transcribing from Facsimile or Hand-written Score
\end_layout

\begin_layout Standard
If you have a PDF of music you wish to transcribe with Denemo you can display
 it within Denemo and create links between the source material and your
 transcrition.
 This means that when you later review your work you can quickly locate
 which point in the original manuscript belongs to which point in your transcrip
tion
\end_layout

\begin_layout Standard
Select the File->Open menu and the item Open a Source for Transcribing.
 Select the PDF containing the music to be transcribed from.
 The PDF is opened in a Source View window.
 Right-click in this window at the point that your transcription will start.
 This will create a link - a Denemo Directive Object - in your score at
 the Denemo cursor position, shown as arrow icon.
 If you later use a right-click on this Denemo Directive the source file
 will be re-opened with the blue highlight marker on that point in the score.
 (Depending on the position of the top of the page you may need to scroll
 the Source View window up or down to bring it into view).
\end_layout

\begin_layout Standard
When you re-open the score to check or edit at some point you can click
 on a nearby link and the source file will be opened and the position highlighte
d once again.
\end_layout

\begin_layout Section
Using a Proof-Read PDF
\end_layout

\begin_layout Standard
If you send the PDF output of your score to someone to proof-read they can
 make PDF annotations to it.
 In the File->Open menu choose Open Proof Read PDF to open a proof-read
 PDF.
 It will open at the first annotation, and, by clicking on the note the
 annotation applies to, the annotation is transferred as a comment into
 the score before the note chosen.
 When you have done all the annotations on the first page advance to the
 next page with annotations using the button "Next".
\end_layout

\begin_layout Standard
There are limitations - the PDF must be created from your score with point-and-c
lick (the default) and you must not alter the score in a way that would
 invalidate the point-and-click.
 (Basically, don't edit again until the proof-reading is done, always good
 practice!) Also, enter the annotations in order from the start and don't
 edit before you have entered all the annotations, as this could invalidate
 the point-and-click.
\end_layout

\begin_layout Section
Score Setup
\end_layout

\begin_layout Standard
Denemo provides different ways to set up scores: 
\end_layout

\begin_layout Itemize
Create template with the special name "default.denemo".
 If this is placed at the top level of your templates directory (that is
 ~/.denemo/templates/default.denemo), then it will be opened each time you
 start a new score.
 
\end_layout

\begin_layout Itemize
Create an init.denemo score with everything you want to start up with, and
 any actions you want to be taken before you begin.
 This will be opened when you first start Denemo (that is once per Denemo
 session).
 See 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Musical-Scores-that-Do-Things"

\end_inset

 for details on what actions you can have Denemo perform before you start.
\end_layout

\begin_layout Itemize
Use a Template
\end_layout

\begin_layout Itemize
Use shortcut keys to add staves and set attributes
\end_layout

\begin_layout Itemize
Use Menus
\end_layout

\begin_layout Subsection
Using Templates to Setup Scores
\end_layout

\begin_layout Standard
Denemo comes with a few preinstalled templates.
 You can also create your own templates as well, in fact you can use any
 Denemo file as a template, just open it using File->Open->Open Custom Template.
 (The only difference is that, opened this way, the score is a new i.e.
 untitled score)
\end_layout

\begin_layout Enumerate
Navigate to File, Open Template.
 The Open dialog box appears.
\end_layout

\begin_layout Enumerate
Double click on a template name from the list of templates.
 The dialog box closes and the template appears.
\end_layout

\begin_layout Enumerate
Adjust the clef, key and time signatures as needed.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Part
Advanced Topics
\end_layout

\begin_layout Section
Customizing Denemo
\end_layout

\begin_layout Subsection
Adding and Editing Key/Mouse Shortcuts
\end_layout

\begin_layout Standard
Denemo allows you to choose which keys activate which commands (shortcuts).
 It also allows you to choose Mouse press/release gestures (in combination
 with keys such as 
\family typewriter
Shift
\family default
, 
\family typewriter
NumLock
\family default
, 
\family typewriter
CapsLock
\family default
 etc).
\end_layout

\begin_layout Standard
See 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sub:The-Command-Center"

\end_inset

 for setting shortcuts.
 The following method can also be used.
 To choose a shortcut for a menu item, select the item (it becomes highlighted)
 and press the key that you want to become the shortcut.
 For mouse shortcuts, right-click the menu item and choose the Create Mouse
 Shortcut, to change the pointer shape during mouse operations invoke the
 Command Center with the Edit Shortcuts option.
 The Set Mouse Shortcut Dialog requires you to set which button and action
 you want to use and then to hold/lock the keyboard modifier while clicking
 on the big button.
 The setting you have chosen is shown, and you click ok to accept it.
 
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Mouse Shortcuts are tricky to set - you are able to control what happens
 on mouse button press and release, which can be used to do things like
 drag notes up and down.
 But they are tricky to set up!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If your choice of keyboard shortcut already belongs to another command,
 you are warned about this, and given the chance to change your mind or
 steal the shortcut.
 Also, you can choose whether to distinguish between keypresses with, say
 the 
\family typewriter
NumLock
\family default
 down and those without or to ignore it.
 If the 
\family typewriter
NumLock
\family default
 is set but no command for that key specifically requires it then the setting
 of 
\family typewriter
NumLock
\family default
 is ignored and the keypress is treated as if the 
\family typewriter
NumLock
\family default
 was off.
\end_layout

\begin_layout Standard
The menu item that activates the command shows the shortcuts that exist
 in bright blue lettering.
 PrsL-
\family typewriter
CapsLoc
\family default
, for example, is the Press action on the Left mouse key while the 
\family typewriter
CapsLock
\family default
 light is on.
 In the default command set this is linked to the BeginSlur command, so
 that together with the RlsL-
\family typewriter
CapsLoc
\family default
 for the release of the left mouse button, you can "draw" slurs by using
 the mouse.
 Similarly, 
\family typewriter
Shift
\family default
 with left mouse button (MveL-
\family typewriter
Shift
\family default
) is set to allow you to drag notes up and down the staff.
 (This is using Command MoveNoteToCursor).
\end_layout

\begin_layout Subsection
More Commands
\end_layout

\begin_layout Subsubsection*
Adding More Features 
\end_layout

\begin_layout Standard
It is possible to add more commands to the set that Denemo ships with.
 Some of these are shipped with Denemo, but not added automatically so as
 to keep the menu sizes manageable.
 Generally, you right-click to find more menu items to add; once added you
 can set a keyboard/mouse shortcut and keep the command in your default
 setup.
 Scheme to be executed at startup can be placed in the denemo.scm file.
\end_layout

\begin_layout Paragraph
An example - quicker dynamics selection
\end_layout

\begin_layout Standard
It can be slow to choose dynamics (
\family typewriter
Ctrl-D
\family default
) because the list is quite long to move down (or move to the mouse).
 You can define a list of the dynamics you actually want to be readily available
 as for example: (define DenemoDynamicList '(("f" "127" "Forte") ("p" "127"
 "Piano"))) This makes forte available just by pressing Return and piano
 available by pressing down arrow Return.
 (The others via More of course).
 If you place this in (home directory)/.denemo-x.x.x/actions/denemo.scm then
 it will be defined when you start Denemo.
\end_layout

\begin_layout Subsubsection
Recording a Denemo Macro 
\end_layout

\begin_layout Standard
You can also get Denemo to record a frequently used sequence of actions
 - it can be installed in the menu system and given a keyboard shortcut
 just like any other command.
 
\end_layout

\begin_layout Standard
To do this choose View->Scheme Script.
 (You do not have to understand what a Scheme Script is to use this!).
 In the window that pops up check Record Scheme Script and then do the set
 of steps you wish Denemo to record.
\end_layout

\begin_layout Standard
As a simple example, suppose you wanted a command to delete the next note
 (there are commands to delete the previous note and the current note, so
 why not?).
 You would enter some notes, put on Record Scheme Script and then move the
 cursor right two steps and delete the previous note (with Backspace if
 that is your shortcut).
 (Each time you use a command you will see the Scheme syntax for that command
 entered into the Scheme window).
 Now turn off Record Scheme Script and you can experiment with your new
 command by pressing Execute in the Scheme Script window.
 To save this new command for future use, you right click on a menu item
 (in the menu where you would like the command to appear) and choose "Save
 Script as New Menu Item", this will ask you to make up a name for your
 new command as well as a label for the menu item etc.
\end_layout

\begin_layout Standard
You can save the command in your default sequence of commands (via Edit->Customi
ze Commands...->Manage Command Set->Save as Default Command Set).
 If not you will be asked if you want to save your new commands when you
 exit.
 Otherwise you can re-load via the More->My Commands menu item.
 
\end_layout

\begin_layout Subsubsection
Editing a LilyPond Tweak
\end_layout

\begin_layout Standard
There is another way of adding your own favorite LilyPond tweaks, which
 is by modifying a tweak that has already been done.
 This can be done by using the text-edit dialog on an existing Denemo Directive
 (usually found under the Advanced button provided by an edit script).
 Here you can see the actual LilyPond text that will be inserted, and there
 is a button to create a script to generate whatever you choose to enter.
 You can also enter the name of graphic images (.png files) that are to be
 used to represent your item in the display, and say where it should be
 positioned.
\end_layout

\begin_layout Standard
Once you have created the script, it can be saved in the menu system by
 right clicking on an item in the menu where you want to place the command,
 and choosing "Save Script as New Menu Item" as above.
\end_layout

\begin_layout Section
Writing Scheme Scripts 
\end_layout

\begin_layout Standard
If you are a programmer you will have guessed that you can edit the Scheme
 Script window to create any command you want.
 Even if you are not familiar with Scheme you may find that you can adapt
 other scripts to do what you want.
\end_layout

\begin_layout Standard
A good example of this is a script to insert a particular LilyPond directive
 into the score.
 This is all that many scripts do: it is easy to see the piece of LilyPond
 in the Scheme Script window, and by changing it you can create a new command.
\end_layout

\begin_layout Standard
For example, from the More menu select the command /menus/ObjectMenu/Instruments
/Orchestral/RehearsalMark (the files are laid out in folders/directories
 in the same way as the menu system itself).
 Then choose Get Script from the right click menu.
 With this command its script is appended to the Scheme Script window.
 Here you can see the part that says
\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

(d-DirectivePut-standalone-postfix "RehearsalMark" " 
\backslash

\backslash
mark 
\backslash

\backslash
default" )
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
which is inserting the LilyPond directive "
\backslash
mark 
\backslash
default" which inserts the default rehearsal mark.
 (The extra backslashes are needed to tell Scheme that you literally mean
 a 
\backslash
 sign).
 You can change this to insert any other LilyPond that you need - always
 doubling the 
\backslash
 signs.
 The you can save as a new menu item, or use Save Script to customize the
 script you started with.
\end_layout

\begin_layout Standard
More ambitious programmers will need to know all the commands available.
 Besides the complete Denemo command set (the list is given in the Command
 Center window) there are the following additional Scheme procedures defined.
\end_layout

\begin_layout Subsection
Commands Getting User Input
\end_layout

\begin_layout Standard
All these commands are invoked from scheme as (d-Command args...)
\end_layout

\begin_layout Itemize
GetChar returns a string containing a single character from the user (blocks
 waiting for a keypress)
\end_layout

\begin_layout Itemize
GetKeypress returns a string representing a keypress from the user (blocks
 waiting for a keypress) (e.g.
 Up for the up arrow key etc.)
\end_layout

\begin_layout Itemize
GetCommand returns a string containing the command name for the user's keypress
 (blocks waiting for a keypress)
\end_layout

\begin_layout Itemize
GetCommandFromUser
\end_layout

\begin_layout Itemize
GetUserInput takes three strings, displays and returns the user's response
 as a string.
\end_layout

\begin_layout Itemize
RadioBoxMenu takes an arbitrary number of arguments, each argument is a
 pair, presents a menu of the first items in the pairs and returns the second
 item as chosen.
\end_layout

\begin_layout Itemize
RadioBoxMenuList like RadioBoxMenu but takes a list
\end_layout

\begin_layout Itemize
GetUserInput takes three arguments (title, prompt, suggested value) and
 returns the string typed by the user in the pop-up dialog or #f if Cancelled.
\end_layout

\begin_layout Paragraph
Commands Getting Information about Object at Cursor
\end_layout

\begin_layout Itemize
GetType returns a scheme string indicating the type of the current object
\end_layout

\begin_layout Itemize
GetNoteName returns a scheme string, giving the note name a-g of the current
 note
\end_layout

\begin_layout Itemize
GetNote returns a scheme string, the note name, accidental and octave of
 the current note (LilyPond notation)
\end_layout

\begin_layout Itemize
GetNotes returns a scheme string, the notes of a chord separated by NULL
 characters
\end_layout

\begin_layout Subsection
Predicates
\end_layout

\begin_layout Itemize
Music?  
\end_layout

\begin_layout Itemize
Note?  
\end_layout

\begin_layout Itemize
Rest?  
\end_layout

\begin_layout Itemize
Chord?  
\end_layout

\begin_layout Itemize
Singlenote?  
\end_layout

\begin_layout Itemize
Directive?  
\end_layout

\begin_layout Itemize
Timesignature?  
\end_layout

\begin_layout Itemize
Keysignature?  
\end_layout

\begin_layout Itemize
Clef?  
\end_layout

\begin_layout Itemize
Tupletmarker?  
\end_layout

\begin_layout Itemize
TupletOpen?  
\end_layout

\begin_layout Itemize
TupletClose?  
\end_layout

\begin_layout Itemize
StemDirective?  
\end_layout

\begin_layout Itemize
None?  
\end_layout

\begin_layout Itemize
MovementEmpty?
\end_layout

\begin_layout Itemize
MeasureEnd? 
\end_layout

\begin_layout Itemize
MeasureBeginning?
\end_layout

\begin_layout Itemize
LastMovement?
\end_layout

\begin_layout Itemize
FirstMovement?
\end_layout

\begin_layout Subsection
Iterators
\end_layout

\begin_layout Standard
The parameters are either a string (script) which will be evaluated after
 moving the cursor to step of the iteration or a scheme procedure (a thunk).
\end_layout

\begin_layout Itemize
(ForAllMovements script) 
\end_layout

\begin_layout Itemize
(ForAllStaffs script) 
\end_layout

\begin_layout Itemize
(ForAllMovementsExecute proc) 
\end_layout

\begin_layout Itemize
(ForAllStaffsExecute proc) 
\end_layout

\begin_layout Itemize
(ForAllObjectsInStaffExecute proc) 
\end_layout

\begin_layout Itemize
(ForAllObjectsInScoreExecute proc) 
\end_layout

\begin_layout Itemize
(ForAllNotesInChordExecute proc) 
\end_layout

\begin_layout Subsection
Message Bar
\end_layout

\begin_layout Standard
These commands put a message on the status bar to the right hand side.
 They are defined in actions/denemo-modules/helpsystem.scm.
 Help messages are pushed paired with a symbol (e.g.
 (cons ('mytag 
\begin_inset Quotes eld
\end_inset

mymessage
\begin_inset Quotes erd
\end_inset

))) and can simply be Popped or removed using the tag.
\end_layout

\begin_layout Itemize
(Help::Push pair) 
\end_layout

\begin_layout Itemize
(Help::Pop)
\end_layout

\begin_layout Itemize
(Help::RemoveTag tag) ; Remove all messages with this 'tag symbol 
\end_layout

\begin_layout Itemize
(Help::ClearQueue) ; Clear the entire queue 
\end_layout

\begin_layout Itemize
(Help::UpdateWriteStatus) 
\end_layout

\begin_layout Subsection
Move and Search
\end_layout

\begin_layout Itemize
(FindNextObjectAllStaffs test?)
\end_layout

\begin_layout Itemize
(PrevDirectiveOfTag tag) 
\end_layout

\begin_layout Itemize
(NextDirectiveOfTag tag) 
\end_layout

\begin_layout Itemize
(NextDirectiveOfTagInMeasure tag) 
\end_layout

\begin_layout Itemize
(PrevDirectiveOfTagInMeasure tag) 
\end_layout

\begin_layout Itemize
(GoToMeasureEnd) 
\end_layout

\begin_layout Itemize
(GoToMeasureBeginning) 
\end_layout

\begin_layout Itemize
(MoveToColumnStart) 
\end_layout

\begin_layout Itemize
(MoveToColumnEnd) 
\end_layout

\begin_layout Itemize
GetPosition ;use result with (apply d-GoToPosition position)) to go to the
 position gotten
\end_layout

\begin_layout Itemize
(PositionEqual? position1 position2) 
\end_layout

\begin_layout Itemize
(Probe test moveinstruction) 
\end_layout

\begin_layout Itemize
(ProbePosition test movement staff measure horizontalposition) 
\end_layout

\begin_layout Itemize
(ProbePreviousMeasure test) 
\end_layout

\begin_layout Itemize
(ProbeNextMeasure test) 
\end_layout

\begin_layout Itemize
(ProbeNextObject test) 
\end_layout

\begin_layout Itemize
(ProbePreviousObject test) 
\end_layout

\begin_layout Itemize
(ProbeNextNote test) 
\end_layout

\begin_layout Itemize
(ProbePreviousNote test) 
\end_layout

\begin_layout Itemize
(MoveDownStaffOrVoice) 
\end_layout

\begin_layout Itemize
(MoveUpStaffOrVoice) 
\end_layout

\begin_layout Subsection
More ...
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
To be sorted and added to ...
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
d-InitializeScript deprecated - init.scm is now run automatically.
 (parameter: action-name) runs a script init.scm in the menupath attached
 to the action whose name is given.
 Used by commands that need a time-consuming initialization step which can
 be skipped on subsequent calls.
\end_layout

\begin_layout Itemize
d-PutNoteName takes a string argument, a note in LilyPond notation.
 Changes the note at the cursor.
 Not for use with multi-note chords.
\end_layout

\begin_layout Itemize
d-DiatonicShift Deprecated.
\end_layout

\begin_layout Itemize
d-NextObject moves cursor to next object, returning TRUE if current object
 has changed
\end_layout

\begin_layout Itemize
d-NextChord as d-NextObject, but skipping non-chord objects.
 chords includes rests and chords with 1 or more notes.
\end_layout

\begin_layout Itemize
d-NextNote as d-NextChord but skipping rests (i.e.
 chords with 0 notes).
\end_layout

\begin_layout Itemize
d-NextStandaloneDirective as NextObject, stopping on a standalone directive.
 Using d-DirectiveGet-standalone tag a directive of a particular tag can
 be found.
\end_layout

\begin_layout Itemize
(d-Directive-type? optional-tag) where type is one of score, scoreheader,
 movementcontrol, header, paper, layout, clef, timesig, keysig, staff, voice,
 standalone, chord or note.This returns #t if the cursor is on a directive
 of type (with tag optional-tag if optional-tag is present) else #f
\end_layout

\begin_layout Itemize
(d-DirectivePut-standalone? tag) inserts a standalone directive with the
 given tag at the current cursor position and places the cursor on it.
\end_layout

\begin_layout Itemize
(d-DirectiveGetTag-type) where type is one of score, scoreheader, movementcontro
l, header, paper, layout, clef, timesig, keysig, staff, voice, standalone,
 chord or note.
 This returns the tag if the cursor is on a directive of type else #f
\end_layout

\begin_layout Itemize
(d-DirectiveGetTagForTag-type tag) returns the tag passed in if the cursor
 is on directive of type with that tag, else it returns the tag of the first
 directive of type that is present at the cursor, else #f
\end_layout

\begin_layout Itemize
d-WarningDialog Pass a string argument to pop up a warning.
\end_layout

\begin_layout Itemize
d-GetOption (parameter string of options).
 Takes a null separated set of options and pops up a dialog offering them
 to the user.
 Returns the one chosen or #f if the user cancels.
\end_layout

\begin_layout Itemize
d-GetMidi
\end_layout

\begin_layout Itemize
d-PutMidi
\end_layout

\begin_layout Itemize
d-PlayMidiKey
\end_layout

\begin_layout Itemize
d-BassFigure
\end_layout

\begin_layout Itemize
d-GetNoteAsMidi 
\end_layout

\begin_layout Itemize
d-RefreshDisplay
\end_layout

\begin_layout Itemize
d-InputFilterNames sets the status bar
\end_layout

\begin_layout Itemize
d-Chordize Ensure that even a single note is treated as a chord - needed
 for some LilyPond constructs (e.g.
 fingerings)
\end_layout

\begin_layout Standard
Standard Denemo commands that pop up dialogs will work as usual if no argument
 is passed to them from Scheme.
 In general if a string consisting of strings of the form "name=value" is
 passed these will be used and no popup will occur.
 The field "name" will be given the value "value".
 The 
\backslash
0 is a NULL character that separates the assignment strings.
 As a shorthand if there is only one value being passed you can just pass
 the value.
 The names of the fields depend on the action being called.
 So for example:
\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

(d-Open "filename=myfile.denemo")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
will open the file "myfile.denemo".
\end_layout

\begin_layout Standard
This feature is being rolled out, and currently works for:
\end_layout

\begin_layout Itemize
d-InsertLilyDirective (directive, display.
 minpixels) (deprecated function)
\end_layout

\begin_layout Itemize
d-AttachLilyToChord (prefix, postfix, display) deprecated see d-DirectiveGet-cho
rd-* and d-DirectivePut-chord-* below
\end_layout

\begin_layout Itemize
d-AttachLilyToNote (prefix, postfix, display) deprecated see d-DirectiveGet-note
* and Put below
\end_layout

\begin_layout Itemize
d-StaffProperties understands a couple of property=value settings
\end_layout

\begin_layout Itemize
d-InitialClef
\end_layout

\begin_layout Itemize
d-InsertClef
\end_layout

\begin_layout Itemize
d-InitialKey 
\end_layout

\begin_layout Itemize
d-InsertKey
\end_layout

\begin_layout Itemize
d-Open filename
\end_layout

\begin_layout Itemize
d-ScoreProperties (fontsize= size of font to be used for score)
\end_layout

\begin_layout Subsubsection
Denemo Directives
\end_layout

\begin_layout Standard
Denemo directives are things like special barlines, rehearsal marks that
 appear amongst the notes, as well things like trills that are attached
 to notes and modifications to other things in the score to give them a
 different appearance or behavior.
 If they are objects in their own right ("Standalone Directives"), like
 the first time bar marker then they appear betwen notes and the cursor
 can be placed on them.
 If they are attached to other things (such as a page break attached to
 a movement) then they are modified with the command used to create them.
\end_layout

\begin_layout Standard
Double clicking on Standalone Directives, gives information about the directive,
 while right-clicking will edit it.
\end_layout

\begin_layout Subsection
LilyPond Editing
\end_layout

\begin_layout Paragraph
Introduction
\end_layout

\begin_layout Standard
From version 0.7.8 we have the ability to edit the LilyPond output within
 Denemo.
 This approach immediately makes Denemo able to do many more things (e.g.
 multiple verses for songs) with the music still editable from within Denemo.
 The gallery of examples and the standard templates contain examples which
 you can use.
\end_layout

\begin_layout Standard
These can be used without knowing the LilyPond language (provided a suitable
 template or example file exists).
 Alternatively, with a general idea of how a LilyPond file works tweaks
 from the LilyPond documentation can be inserted into the LilyPond output
 and stored with the Denemo, leaving open the possibility of further editing
 of the notes within Denemo without the need to re-apply tweaks or keep
 separate LilyPond files.
\end_layout

\begin_layout Subsubsection
Using the LilyPond Window
\end_layout

\begin_layout Standard
Under the View menu is a Show LilyPond item which pops up a window with
 the LilyPond output in it.
 The text is interspersed with buttons which enable you to hide or show
 the various sections or to create custom versions.
 The text in bold can be altered and the alterations are kept in the Denemo
 file.
\end_layout

\begin_layout Standard
The two windows are kept in sync, so you can move back and forth between
 editing textually and editing in Denemo.
\end_layout

\begin_layout Standard
Right clicking on the text gives a menu for actions on the LilyPond text.
 LilyPond text can be inserted between notes, and the final section (the
 score layout) can be turned into editable text (see Score Layout).
 There is one for moving the cursor to the LilyPond text for the current
 Denemo object.
 Moving the cursor in the text window with the arrow keys causes the Denemo
 window cursor to move in synchronism.
\end_layout

\begin_layout Standard
This menu also includes a Print command that operates on the visible LilyPond
 text in the window.
 This means you can open specific custom score layouts and print from them,
 or even make a temporary edit for just one print.
 If you save the score with custom layouts then these are remembered.
 So when you reload and the custom score layout will be printed.
\end_layout

\begin_layout Paragraph
Detail
\end_layout

\begin_layout Standard
Several custom layouts can be kept, selecting them in the Score Layout view
 enables the same Denemo file to print a variety of things from the same
 music input.
 
\end_layout

\begin_layout Standard
For example, a full score or a set of parts, or several voices on group
 of staffs or even a piano reduction.
 
\end_layout

\begin_layout Standard
The various Voices/Staffs for the different Movements are separated by buttons.
 These are labelled by enumerating the movements and staffs in order, so
 the first voice in the first movement has the music defined as "MvmntIVoiceIMus
ic" and so on.
 Within these music blocks you can insert arbitrary LilyPond text between
 notes, (the insertion points are marked by grey blocks) and the text inserted
 will appear as a LilyPond directives in the main Denemo window.
 
\end_layout

\begin_layout Standard
The main Denemo window also moves its cursor to correspond with where you
 are editing.
 (It should of course move the cursor immediately you click on a point in
 the music, but, as yet, it only moves the cursor when you press a key just
 before the note name - one of the arrow keys will do).
\end_layout

\begin_layout Standard
Custom layout blocks can be created by right-clicking on the Standard score
 layout and selecting create custom score layout.
 The Score Layout window allows creation of customized layouts via a GUI.
 If you print a single part from all movements, you get the standard scoreblock
 for this and can add it to your custom score block so that a single print
 command prints, e.g.
 both a full score and parts.
 Using the 
\backslash
book {} block you can put these into separate files (stored in the folder
 .denemo in your home folder).
\end_layout

\begin_layout Standard
The music defined by MvmntIVoiceIMusic is then used in the score blocks
 at the end of the LilyPond window, by the expression 
\backslash
MvmntIVoiceIMusic.
 This means that the same music can be output in several different ways,
 so that the same Denemo file can contain custom score blocks to output
 the music as a Piano Score with several voices or separate parts, for example.
\end_layout

\begin_layout Standard
The definitions for MvmntIVoiceIMusic actually look like this:
\end_layout

\begin_layout Itemize

\family typewriter
MvmntIVoiceIProlog = {
\backslash
MvmntIVoiceITimeSig 
\backslash
MvmntIVoiceIKeySig 
\backslash
MvmntIVoiceIClef} 
\end_layout

\begin_layout Itemize

\family typewriter
MvmntIVoiceIMusic = {
\backslash
MvmntIVoiceIProlog 
\backslash
MvmntIVoiceI}
\end_layout

\begin_layout Standard
Where 
\backslash
MvmntIVoiceI is the actual block of notes you have written, while the other
 definitions hold the time signature, clef etc.
 By using these, you can print the same music with different clefs, still
 maintaining the ability to edit the notes in Denemo.
\end_layout

\begin_layout Standard
Note that the normal Denemo Print commands are still operate as they do
 if you never look at the LilyPond window.
 What happens is that if you select the Print Current Part menu item then
 this creates a tailored standard scoreblock for that part.
 However, if you use the File->Print command then it prints the first custom
 scoreblock that is open (visible) (or the standard scoreblock if you do
 not have any custom scoreblocks).
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Clicking (as opposed to using the arrow keys) in the LilyPond text does
 not move the cursor in the Denemo window.
 When you delete a LilyPond directive textually you have to move the cursor
 to start re-inserting it.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
More Features
\end_layout

\begin_layout Subsubsection
Piano Staffs, Orchestral Scores etc
\end_layout

\begin_layout Standard
A piano staff can be added using the Staff->Add Staff menu.
 In addition, piano staffs, and staff groups such as choir staff can be
 created using the Staff Groupings menu under the staff menu.
 You can set a piano staff within a staff group by setting successively
 the StartPiano and StartGroup contexts on a single staff, or more generally
 setting StartPiano, EndPiano on adjacent staffs within a staff group.
\end_layout

\begin_layout Subsection
Single Staff Polyphony
\end_layout

\begin_layout Standard
Use the Staffs/Voices->Voices menu for placing more than one voice on a
 staff.
 You can set the initial voice number from this menu (voices 1 and 3 are
 stem up with slurs and ties etc adjusting to suit, voices 2 and 4 are stem
 down).
 Directives can be placed in the music to change voice, see Directives->Typesett
er->Voices menu.
\end_layout

\begin_layout Standard
You will also need spacer rests for voices that are silent, and commands
 to displace rests vertically and horizontally (see Notes/Rests->Rest Insertion
 menu), and commands from the Voices menu under the Staffs/Voices and Directives
->Typesetter menus.
\end_layout

\begin_layout Subsection
Entering Figured Bass
\end_layout

\begin_layout Standard
To enter figures choose Notes/Rests->Markings->Figured Bass.
 There are some shortcuts that enable all the work to be done with the numeric
 keypad.
 A brief summary is given by right clicking the option.
 The conventions are described in the LilyPond docs.
\end_layout

\begin_layout Subsection
Fret Diagrams
\end_layout

\begin_layout Standard
Fret Diagrams can be placed on the score using the command Fret Diagram
 in the ObjectMenu->Directives->Markings menu In addition by assigning a
 Denemo staff to display as fret diagrams, chords can be entered in standard
 notation which will then be dislayed as fret diagrams.
 See ObjectMenu->StaffMenu->StaffPropertiesMenu->FretDiagrams for this.
\end_layout

\begin_layout Subsection
Tablature
\end_layout

\begin_layout Standard
Music can be displayed in tablature - the default is for standard guitar
 tuning but others can be set.
 The menus to explore are:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ObjectMenu->StaffMenu->StaffPropertiesMenu->Tablature
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ObjectMenu->Directives->Typesetter->Tablature
\end_layout

\begin_layout Standard
It is possible to display the same music as both notation and tablature,
 and example of how to do this will be found under File->Open->Open Example.
\end_layout

\begin_layout Subsection
Entering Chord Symbols
\end_layout

\begin_layout Standard
To enter chord symbols choose Notes/Rests->Markings->Chord Symbols.
 A brief summary is given by right clicking the option.
 The conventions are described in the LilyPond documentation.
\end_layout

\begin_layout Standard
An alternative is to set a staff to display not the chords in regular notation
 but the chord symbol that represents the chord.
 These can then be arranged above or below the melody or other representation
 of the piece.
\end_layout

\begin_layout Standard
Chord Charts can also be created - there is a Chord Charts palette for these.
\begin_inset Note Note
status open

\begin_layout Plain Layout
I don't see a section about the Chord Charts palette.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Musical-Scores-that-Do-Things"

\end_inset

Musical Scores that Do Things!
\end_layout

\begin_layout Standard
By saving a Denemo score with a script defined (in the script window) you
 can create music lessons, automatic midi player...
 the possibilities are endless.
 When you open such a score, the script is run - it can take user input
 and manipulate the score, or do other actions as your fancy takes you.
\end_layout

\begin_layout Standard
There is a special score init.denemo that is run on startup.
 By editing this you can startup with whatever template and whatever actions
 you wish to be performed.
 If you set it to do something that quits Denemo, you may need to delete
 the file before using Denemo normally again.
 Your local init.denemo is stored in the directory .denemo/actions in your
 home directory.To create it put the script you want in the script window
 and use SaveAs selecting ~/.denemo/actions/init.denemo as your file to save
 to.
\end_layout

\begin_layout Subsubsection
What Happens at Startup
\end_layout

\begin_layout Standard
On starting the scheme script ~/.denemo-(version number)/actions/denemo.scm
 is executed (where ~ means your home directory and version number is 1.1.2
 or later).
\end_layout

\begin_layout Standard
A denemo file called init.denemo is/was loaded, but this is deprecated.
\end_layout

\begin_layout Standard
In addition, on startup a set of keyboard and mouse shortcuts, and a selection
 of optional menu items are loaded.
 Other sets are available via the Edit->Customize Commands ...->Manage Command
 Set dialog.
\end_layout

\begin_layout Subsection
Starting Denemo - Command Line Options
\end_layout

\begin_layout Standard
Denemo --help shows the options at startup.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Part
Technical Reference - Denemo Directives
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Denemo-Objects"

\end_inset

Denemo Objects
\end_layout

\begin_layout Standard
Denemo Objects are all the things that are placed in the measures of the
 staffs in the Denemo Display.
 These are Chords, Notes (single note chords), Rests, Clef Changes, Key
 Changes, Time Signature Changes, Voice Changes (stemming control), Tuplet
 Starts, Tuplet Ends and Denemo Directives.
 The Denemo cursor can be stepped through every Denemo Object in the bar
 and by double clicking the object can be inspected and edited in detail.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Denemo-Directives"

\end_inset

Denemo Directives
\end_layout

\begin_layout Standard
Denemo Directives give attributes to objects that are not built-in but can
 be changed by the user.
\end_layout

\begin_layout Standard
Denemo Directives can be attached at almost every level of a Denemo score
 and can modify the behavior of the element concerned.
 They contain fields to describe how the element's properties should be
 modified, either in the display or in the printing.
 Elements, such as clefs notes etc have their own built-in display and print
 properties; Denemo Directives allow you (or scripts you invoke) to modify
 them for many more purposes than the built-in set allows.
 This means Denemo can grow - you can add features - without getting a new
 version.
\end_layout

\begin_layout Standard
For example the drum clef is not built-in to Denemo.
 Instead a directive attached to the clef has a field (graphic) set to an
 image of the drum clef, and another field (postfix) set to the LilyPond
 syntax for a drum clef, while another field (override) is set to indicate
 that these values should replace the normal ones, rather than adding to
 them.
\end_layout

\begin_layout Standard
The elements that can be modified in this way are the following:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
score: the LilyPond fields (prefix and postfix) are placed at the start
 of the score and just before each movement.
 The display field is shown at the top of the display.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
scoreheader: Attached to the score.
 The postfix field is put inside a 
\backslash
header{} block at the start of the score.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
movementcontrol: Attached to a movement.
 The prefix field is placed before the movements 
\backslash
score{} block, the postfix after it.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
header: Attached to a movement.
 As scoreheader but for 
\backslash
header[] blocks inside the movement's score block.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
paper: Attached to the score.
 The postfix is placed inside a 
\backslash
paper{} block.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
layout: Attached to a movement.
 The postfix is placed inside a 
\backslash
layout{} block in the movement's scoreblock.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
clef: Attached to a clef or clef change.
 The graphic holds the displayed icon, gx,gy its position.
 The postfix field is put into the music at the point where the clef is
 found, replacing the normal text if the override is set.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
timesig: Attached to a time signature or time signature change.
 The graphic holds the displayed icon, gx,gy its position.
 The postfix field is put into the music at the point where the time signature
 is found, replacing the normal text if the override is set.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
keysig: as timesig but for key signatures.
 (e.g.
 used to supress keysignatures in drum clef).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
staff: The postfix field modifies the whole staff context, with the display
 field printed at the start of the staff
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
voice: The postfix field modifies the voice context, with the display field
 printed at the start of the staff containing the voice
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
standalone: A directive not attached to an music element - it comes with
 the music and is used for things like repeat bars etc.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
chord: The prefix field is emitted before the LilyPond for the chord and
 the postfix after it.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
note: The prefix field is emitted before the LilyPond for the note and the
 postfix after it.
 Examples are fingerings attached to notes etc.
 Again the display and graphic fields a placed in the display positioned
 relative to the note via the coordinate fields gx, gy (for the graphic)
 and tx, ty for the display text.
\end_layout

\begin_layout Standard
The Directives are sufficiently important to have their own commands.
\end_layout

\begin_layout Standard
d-DirectivePut-type-field where type is one of score, scoreheader, movementcontr
ol, header, paper, layout, clef, timesig, keysig, staff, voice, standalone,
 chord or note and field is one of display, tx, ty, gx, gy, graphic, prefix,
 postfix, override, midibytes.
 These commands take two arguments, a tag (string) and a value to set.
 For example:
\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

(d-DirectivePut-note-postfix "LHFinger" "3")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
will put the fingering 3 on (after) the note at the cursor.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
d-DirectiveGet-type-field type is one of score, scoreheader, movementcontrol,
 header, paper, layout, clef, timesig, keysig, staff, voice, standalone,
 chord or note and field is one of display, tx, ty, gx, gy, graphic, prefix,
 postfix, override, midibytes.
 This function returns the value in the field or #f if there is no directive
 with the given tag at the cursor.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
d-DirectiveDelete-type type is one of score, scoreheader, movementcontrol,
 header, paper, layout, clef, timesig, keysig, staff, voice, standalone,
 chord or note.
 This function returns #t or #f if a directive with the given tag was deleted.
\end_layout

\begin_layout Subsection
The Directive Fields
\end_layout

\begin_layout Standard
The fields of the Denemo Directive can control the Denemo Display and the
 LilyPond output.
\end_layout

\begin_layout Standard
The fields in d-DirectiveGet/Put have the following meanings:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
postfix - A fragment of LilyPond to be output (after the LilyPond for any
 object the directive is attached to).
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
prefix - A fragment of LilyPond to be output (before the LilyPond for any
 object the directive is attached to).
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
display - text to be shown in the Denemo Display
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
tx,ty - where to show the text in the Denemo Display
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
graphic - For directives that are in the music this is a .png image to be
 shown in the Denemo Display (the directory bitmaps holds these).
 The graphic can be saved for a command using the right-click -> Save Graphic
 command, after selecting a portion of the print preview as the image required.
 For directives attached to the score, movement etc the string set here
 will be displayed on the button in the button box for that sort of directive
 (see Show Score Titles etc in view menu for showing this button box).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
gx,gy - where to show thegraphic in the Denemo Display
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
minpixels - how much space to leave for this item in the Denemo Display
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
override - Contains bits to determine whether the LilyPond contained in
 the Directive (postfix and/or prefix fields) should override the normal
 LilyPond output, and whether the Graphic should replace the normal Denemo
 display for the item.
 A further tranche of bits controls MIDI output for the directive, which
 can override the normal MIDI interpretation of the music and provide additional
 information not explicit in the music notation (e.g.
 the tempo of an Adagio marking).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
midibytes - a string of numbers (in hexadecimal format) whose interpretation
 is given by the MIDI bits in the override field
\end_layout

\begin_layout Standard
The override field contains the following bits:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
DENEMO_OVERRIDE_LILYPOND: override the LilyPond output normally used at
 this point, rather than adding to the normal output.
 The text used is in the prefix and postfix fields.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
DENEMO_OVERRIDE_GRAPHIC: overrides what Denemo would normally show in the
 display with the image named in the graphic field of the directive
\end_layout

\begin_layout Standard
The MIDI bits in the override field are as follows
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
DENEMO_OVERRIDE_VOLUME: the MIDI velocity to use
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
DENEMO_OVERRIDE_DURATION: affects the duration of a note.
 not yet implemented
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
DENEMO_OVERRIDE_REPEAT: indicates that an earlier passage should be repeated
 (from a directive of the same tag).
 not yet implemented
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
DENEMO_OVERRIDE_CHANNEL: midibytes field gives the MIDI channel to use (?
 implemented?)
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
DENEMO_OVERRIDE_TEMPO: midibytes field gives the tempo to use.
\end_layout

\begin_layout Standard
The interpretation of these flags is modified by the following flags:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
DENEMO_OVERRIDE_ONCE: the value in midibytes is to be used just for the
 item the directive is attached to.
 not yet implemented
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
DENEMO_OVERRIDE_STEP: the value in midibytes is to be used from this point
 on
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
DENEMO_OVERRIDE_RAMP: the value in midibytes is to be used as a starting
 value, a corresponding directive (i.e.
 with the same tag) gives the findal value, values are then interpolated
 between these.
 not yet implemented
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
DENEMO_OVERRIDE_RELATIVE: value in midibytes is used relative to the current
 value (otherwise it is an absolute value; e.g.
 an absolute velocity etc)
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
DENEMO_OVERRIDE_PERCENT: value in midibytes is interpreted as percentage
 value.
 not yet implemented
\end_layout

\begin_layout Standard
These flags are combined together to get the combination required for the
 directive using the scheme procedure called logior.
\end_layout

\begin_layout Standard
Here is an example, making a step-change in volume of 0x40 in the MIDI output,
 and printing "piÃ¹ mosso" in the output score 
\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

;;;;;;;;;; piu mosso
\end_layout

\begin_layout Plain Layout

(d-DirectivePut-standalone-minpixels "StepTempo" 20)
\end_layout

\begin_layout Plain Layout

(d-CursorLeft)
\end_layout

\begin_layout Plain Layout

(d-DirectivePut-standalone-override "StepTempo" (logior DENEMO_OVERRIDE_TEMPO
 DENEMO_OVERRIDE_STEP DENEMO_OVERRIDE_RELATIVE))
\end_layout

\begin_layout Plain Layout

(d-DirectivePut-standalone-midibytes "StepTempo" "40")
\end_layout

\begin_layout Plain Layout

(d-DirectivePut-standalone-display "StepTempo" "piu mosso")
\end_layout

\begin_layout Plain Layout

(d-DirectivePut-standalone-postfix "StepTempo" "^
\backslash

\backslash
markup {
\backslash

\backslash
bold 
\backslash

\backslash
italic 
\backslash
"piÃ¹ mosso
\backslash
"}")
\end_layout

\begin_layout Plain Layout

(d-RefreshDisplay)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
In this example the directive is a standalone directive.
 MIDI commands are being extended to apply to chords and notes.
 Implementation of the commands for Voices, Movements, Score etc are not
 yet done.
\end_layout

\begin_layout Subsection
Directive Edit Scripts
\end_layout

\begin_layout Paragraph
Introduction
\end_layout

\begin_layout Standard
Score and movement directives can define a value for their graphic - a button
 then appears at the top of the score which can be used to edit the directive.
 Likewise Staff and Voice directives show as a properties icon before the
 staff to which they apply (staff directives above, voice directives below).
 Clicking on these lets you edit the directive.
\end_layout

\begin_layout Standard
The command EditDirective can be used when the cursor is on a Denemo Directive
 object, or an object with a Denemo Directive attached to it.
 What happens then is determined by a script named after the "tag", or name
 of the directive.
 For example the command RehearsalMark creates a Directive with tag "RehearsalMa
rk" and EditDirective runs a script called RehearsalMark.scm.
\end_layout

\begin_layout Standard
There is also a low-level editing dialog which is invoked if no editing
 script exists or directly from scheme using (d-DirectiveTextEdit-* tagname).
 This allows you to edit and delete a directive directly.
 The other directive editing commands are EditScoreDirective EditMovementDirecti
ve EditStaffDirective EditVoiceDirective EditClefDirective EditKeysigDirective
 EditTimesigDirective for directives attached to the relevant objects.
\end_layout

\begin_layout Standard
The low level edit of directives from scheme uses the following command:
\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

(d-DirectiveTextEdit-<field> <tagname>)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
Where <tagname> specifies the directive to be edited and <field> is one
 of score, scoreheader, movementcontrol, header, paper, layout, clef, timesig,
 keysig, staff, voice, standalone, chord or note.
\end_layout

\begin_layout Standard
For example,
\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

(d-DirectiveTextEdit-paper "PrintAllHeaders") 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
gives low-level access to the directive setting the print all headers command
 in the paper block of the LilyPond output.
\end_layout

\begin_layout Subsubsection
Initialization Scripts
\end_layout

\begin_layout Standard
Each menu can have an initialization script, which can contain procedures
 that would be too time consuming to define every time they are needed.
 These scripts are guaranteed to be run before any menu item is activated
 within the menu.
 They can be read/written using the right click menu on any scripted menu
 item.
\end_layout

\begin_layout Subsubsection
Edit Scripts
\end_layout

\begin_layout Standard
Each directive has a tag field, so that it can be recognized by the scripts
 that manipulate it.
 In particular for each tag there can be an edit script, for editing a directive
 of that tag.
 
\end_layout

\begin_layout Standard
Edit scripts are kept in a directory actions/editscripts parallel with the
 directory actions/menus where the commands themselves are kept.
 
\end_layout

\begin_layout Standard
You can read and write edit scripts by using the low level editing dialog
 on a directive with the tag you are writing for.
 
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
The low level editing dialog is the one that is presented if there is no
 edit script.
 Edit scripts can themselves give access to this dialog by including an
 option cue-Advanced which calls (d-DirectiveTextEdit-field tag) for the
 appropriate field and tag.
 For an example see the edit script for Instruments -> Orchestra -> RehearsalMar
k.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
They have available functions to enable editing of directives which are
 defined in actions//denemo.scm executed at startup.
 The functions and variables for script editing are:
\end_layout

\begin_layout Itemize
d-GetOption followed by a nul separated list of options, offers the options
 to the user and returns one, or #f if the user cancels.
\end_layout

\begin_layout Itemize
Extra-Offset tag type context.
 Takes three string options: tag is the name of the directive to be edited,
 which must be the name of a LilyPond object, type is the type of directive
 (note, chord, standalone, staff, voice or score), context is the LilyPond
 context of the object.
 Only tag is required.
 Shifts the object in the LilyPond output.
\end_layout

\begin_layout Itemize
SetPadding tag type context.
 As Extra-Offset, it sets the space left around the item in the LilyPond
 engraving process.
\end_layout

\begin_layout Itemize
SetRelativeFontSize tag type context.
 As Extra-Offset, it shifts the font size of the following text in the LilyPond
 engraving process.
\end_layout

\begin_layout Itemize
CreateButton tag label this is just a convenience function to put a button
 with the passed in label onto a button box at the top of the screen.
 Scripts can attach actions to such tagged buttons.
\end_layout

\begin_layout Itemize
d-SetDirectiveTagActionScript tag scheme-actions.
 This command sets scheme-actions as the actions to be performed when the
 button of the given tag is clicked.
 The default action is to run any editscript associated with tag, and if
 none to run the d-DirectiveTextEdit-score on the directive that displays
 the button.
\end_layout

\begin_layout Itemize
d-DirectiveGetForTag-field tag.
 Useful variables defined:
\end_layout

\begin_deeper
\begin_layout Itemize
(define stop "
\backslash
0")
\end_layout

\begin_layout Itemize
(define cue-Advanced "Advanced")
\end_layout

\begin_layout Itemize
(define cue-PlaceAbove "Place above staff")
\end_layout

\begin_layout Itemize
(define cue-PlaceBelow "Place below staff")
\end_layout

\begin_layout Itemize
(define cue-SetRelativeFontSize "Set Relative Font Size")
\end_layout

\begin_layout Itemize
(define cue-OffsetPositionAll "Offset Position (All)")
\end_layout

\begin_layout Itemize
(define cue-OffsetPositionOne "Offset Position (One)")
\end_layout

\begin_layout Itemize
(define cue-EditText "Edit Text")
\end_layout

\begin_layout Itemize
(define cue-SetPadding "Set Padding")
\end_layout

\begin_layout Itemize
(define cue-Delete "Delete")
\end_layout

\end_deeper
\begin_layout Part
\start_of_appendix
Obtaining and Installing Denemo
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/osicons.jpg
	width 30text%

\end_inset


\end_layout

\begin_layout Standard
Denemo is available from the Downloads page of the Denemo website 
\begin_inset CommandInset href
LatexCommand href
name "http://denemo.org"
target "http://denemo.org"

\end_inset

, where more up-to-date information will be found.
\end_layout

\begin_layout Standard
Denemo is available from a variety of sources for different distributions.
 The latest stable release (tar.gz and .deb formats) is available for download
 from 
\begin_inset CommandInset href
LatexCommand href
name "http://denemo.org/downloads-page/"
target "http://denemo.org/downloads-page/"

\end_inset

.
 You can install Denemo from the Debian unstable repositories, using the
 command apt-get install denemo.
 Builds for Macintosh are available from the Gnu-Darwin project.
 The Denemo development branch can be downloaded using anonymous CVS or
 Git.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Anonymous Git checkout:
\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

git clone git://git.savannah.gnu.org/denemo.git
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
Anonymous CVS checkout: 
\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

cvs -d:pserver:anonymous@pserver.git.sv.gnu.org:/denemo.git co -d denemo master
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
\noindent
Dependencies
\end_layout

\begin_layout Standard
To build Denemo from a source package, pleas see the website for an up-to-date
 list of dependencies.
 Remember to install the development packages as well (check your distribution
 for the specific package name):
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
For Debian Users: Type apt-cache showsrc denemo at a command line to determine
 what are the package names for Denemo dependencies.
 Type apt-get build-dep denemo to build the dependent files or use apt-get
 to install the packages individually by copying and pasting their names
 to the command line.
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Installing Denemo from Source Code
\end_layout

\begin_layout Standard
Denemo is available in a variety of formats.
 The current stable release is available either as source code or in binary
 format.
 The Development branch of Denemo is available as a GIT source tree.
\end_layout

\begin_layout Subsection
To install from source code:
\end_layout

\begin_layout Enumerate
Open a terminal window.
\end_layout

\begin_layout Enumerate
Change directory to the directory to which you downloaded the Denemo source
 package.
\end_layout

\begin_layout Enumerate
Uncompress the source package using standard Linux tools (tar and gunzip).
\end_layout

\begin_layout Enumerate
Change directory to the uncompressed source directory.
\end_layout

\begin_layout Subsection
Generating a Configure Script
\end_layout

\begin_layout Standard
Git does not come with a Configure script; generate one by typing and pressing
 Enter after the line:
\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

./autogen.sh
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
To build from source, press Enter after each line:
\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

./configure
\end_layout

\begin_layout Plain Layout

make
\end_layout

\begin_layout Plain Layout

make install
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
If you are not logged in as root user, for the last step type su and your
 root password, or alternately type sudo make install.
\end_layout

\end_body
\end_document
